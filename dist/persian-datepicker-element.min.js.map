{"version":3,"file":"persian-datepicker-element.min.js","sources":["webpack://PersianDatePickerElement/./src/persian-date.ts","webpack://PersianDatePickerElement/./src/utils/hijri-utils.ts","webpack://PersianDatePickerElement/./src/utils/event-utils.ts","webpack://PersianDatePickerElement/./src/persian-datepicker-element.ts","webpack://PersianDatePickerElement/./src/index.ts"],"sourcesContent":["/**\r\n * Jalali (Shamsi) Calendar utilities\r\n */\r\nexport const PersianDate = {\r\n  g_days_in_month: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n  j_days_in_month: [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29],\r\n  \r\n  jalaliToGregorian: function(j_y: number, j_m: number, j_d: number): [number, number, number] {\r\n    j_y = parseInt(j_y.toString());\r\n    j_m = parseInt(j_m.toString());\r\n    j_d = parseInt(j_d.toString());\r\n    \r\n    const jy = j_y - 979;\r\n    const jm = j_m - 1;\r\n    const jd = j_d - 1;\r\n    \r\n    let j_day_no = 365 * jy + Math.floor(jy / 33) * 8 + Math.floor((jy % 33 + 3) / 4);\r\n    for (let i = 0; i < jm; ++i) j_day_no += this.j_days_in_month[i];\r\n    \r\n    j_day_no += jd;\r\n    \r\n    let g_day_no = j_day_no + 79;\r\n    \r\n    let gy = 1600 + 400 * Math.floor(g_day_no / 146097);\r\n    g_day_no = g_day_no % 146097;\r\n    \r\n    let leap = true;\r\n    if (g_day_no >= 36525) {\r\n      g_day_no--;\r\n      gy += 100 * Math.floor(g_day_no / 36524);\r\n      g_day_no = g_day_no % 36524;\r\n      \r\n      if (g_day_no >= 365) g_day_no++;\r\n      else leap = false;\r\n    }\r\n    \r\n    gy += 4 * Math.floor(g_day_no / 1461);\r\n    g_day_no %= 1461;\r\n    \r\n    if (g_day_no >= 366) {\r\n      leap = false;\r\n      g_day_no--;\r\n      gy += Math.floor(g_day_no / 365);\r\n      g_day_no = g_day_no % 365;\r\n    }\r\n    \r\n    let i = 0;\r\n    for (; g_day_no >= this.g_days_in_month[i] + (i === 1 && leap ? 1 : 0); i++) {\r\n      g_day_no -= this.g_days_in_month[i] + (i === 1 && leap ? 1 : 0);\r\n    }\r\n      \r\n    const gm = i + 1;\r\n    const gd = g_day_no + 1;\r\n    \r\n    return [gy, gm, gd];\r\n  },\r\n  \r\n  gregorianToJalali: function(g_y: number, g_m: number, g_d: number): [number, number, number] {\r\n    g_y = parseInt(g_y.toString());\r\n    g_m = parseInt(g_m.toString());\r\n    g_d = parseInt(g_d.toString());\r\n    \r\n    const gy = g_y - 1600;\r\n    const gm = g_m - 1;\r\n    const gd = g_d - 1;\r\n    \r\n    let g_day_no = 365 * gy + Math.floor((gy + 3) / 4) - Math.floor((gy + 99) / 100) + Math.floor((gy + 399) / 400);\r\n    \r\n    for (let i = 0; i < gm; ++i)\r\n      g_day_no += this.g_days_in_month[i];\r\n      \r\n    if (gm > 1 && ((gy % 4 === 0 && gy % 100 !== 0) || (gy % 400 === 0)))\r\n      g_day_no++;\r\n      \r\n    g_day_no += gd;\r\n    \r\n    let j_day_no = g_day_no - 79;\r\n    const j_np = Math.floor(j_day_no / 12053);\r\n    j_day_no = j_day_no % 12053;\r\n    \r\n    let jy = 979 + 33 * j_np + 4 * Math.floor(j_day_no / 1461);\r\n    \r\n    j_day_no %= 1461;\r\n    \r\n    if (j_day_no >= 366) {\r\n      jy += Math.floor((j_day_no - 1) / 365);\r\n      j_day_no = (j_day_no - 1) % 365;\r\n    }\r\n    \r\n    let i = 0;\r\n    for (; i < 11 && j_day_no >= this.j_days_in_month[i]; ++i) {\r\n      j_day_no -= this.j_days_in_month[i];\r\n    }\r\n    \r\n    const jm = i + 1;\r\n    const jd = j_day_no + 1;\r\n    \r\n    return [jy, jm, jd];\r\n  },\r\n  \r\n  isLeapJalaliYear: function(year: number): boolean {\r\n    const breaks = [1, 5, 9, 13, 17, 22, 26, 30];\r\n    return breaks.includes(year % 33);\r\n  },\r\n  \r\n  getDaysInMonth: function(year: number, month: number): number {\r\n    if (month < 1 || month > 12) return 0;\r\n    if (month <= 6) return 31;\r\n    if (month <= 11) return 30;\r\n    // Month 12 (Esfand)\r\n    return this.isLeapJalaliYear(year) ? 30 : 29;\r\n  },\r\n  \r\n  getMonthName: function(month: number): string {\r\n    const monthNames = [\r\n      \"فروردین\", \"اردیبهشت\", \"خرداد\", \"تیر\", \"مرداد\", \"شهریور\",\r\n      \"مهر\", \"آبان\", \"آذر\", \"دی\", \"بهمن\", \"اسفند\"\r\n    ];\r\n    return monthNames[month - 1];\r\n  },\r\n  \r\n  getDayOfWeek: function(jYear: number, jMonth: number, jDay: number): number {\r\n    const gdate = this.jalaliToGregorian(jYear, jMonth, jDay);\r\n    const date = new Date(gdate[0], gdate[1]-1, gdate[2]);\r\n    return date.getDay();\r\n  },\r\n  \r\n  /**\r\n   * Returns the number of days in a Jalali year\r\n   */\r\n  getDaysInYear: function(year: number): number {\r\n    return this.isLeapJalaliYear(year) ? 366 : 365;\r\n  },\r\n  \r\n  /**\r\n   * Validates a Jalali date\r\n   */\r\n  isValidDate: function(year: number, month: number, day: number): boolean {\r\n    if (year < 0 || month < 1 || month > 12 || day < 1) return false;\r\n    return day <= this.getDaysInMonth(year, month);\r\n  }\r\n}; ","/**\r\n * Utilities for converting between Hijri (Islamic) and Jalali (Persian) calendars\r\n * \r\n * This implementation uses the Umm al-Qura calendar system which is used in many\r\n * Islamic countries and is accurate for contemporary dates\r\n */\r\n\r\n/**\r\n * Converts Hijri date to Gregorian date\r\n * \r\n * @param hy Hijri year\r\n * @param hm Hijri month (1-12)\r\n * @param hd Hijri day (1-30)\r\n * @returns Array [year, month, day] with Gregorian date\r\n */\r\nexport function hijriToGregorian(hy: number, hm: number, hd: number): [number, number, number] {\r\n  // Ensure valid input\r\n  if (hm < 1 || hm > 12 || hd < 1 || hd > 30) {\r\n    throw new Error('Invalid Hijri date');\r\n  }\r\n  \r\n  // Days since Hijri epoch (approximately July 19, 622 CE)\r\n  // Algorithm based on Umm al-Qura calendar used in Saudi Arabia\r\n  \r\n  // Convert Hijri to days since Hijri epoch\r\n  const epochDays = Math.floor((hy - 1) * 354.367) + // Average Hijri year is 354.367 days\r\n                    Math.floor((hm - 1) * 29.5) + // Average Hijri month is 29.5 days\r\n                    (hd - 1);\r\n  \r\n  // Convert to Gregorian date (Julian days + days since Hijri epoch + Gregorian epoch adjustment)\r\n  const julianDays = epochDays + 1948439.5; // Adjustment for Hijri epoch in Julian days\r\n  \r\n  // Convert Julian days to Gregorian date\r\n  return julianDaysToGregorian(julianDays);\r\n}\r\n\r\n/**\r\n * Converts Julian days to Gregorian date\r\n * \r\n * @param julianDays Julian day count\r\n * @returns Array [year, month, day] with Gregorian date\r\n */\r\nfunction julianDaysToGregorian(julianDays: number): [number, number, number] {\r\n  const z = Math.floor(julianDays + 0.5);\r\n  const a = Math.floor((z - 1867216.25) / 36524.25);\r\n  const b = z + 1 + a - Math.floor(a / 4);\r\n  const c = b + 1524;\r\n  const d = Math.floor((c - 122.1) / 365.25);\r\n  const e = Math.floor(365.25 * d);\r\n  const f = Math.floor((c - e) / 30.6001);\r\n  \r\n  // Calculate day, month, and year\r\n  const day = Math.floor(c - e - Math.floor(30.6001 * f));\r\n  let month = f - 1 - 12 * Math.floor(f / 14);\r\n  let year = d - 4715 - Math.floor((7 + month) / 10);\r\n  \r\n  // Convert to 1-based month\r\n  if (month < 1) {\r\n    month += 12;\r\n    year -= 1;\r\n  }\r\n  \r\n  return [year, month, day];\r\n}\r\n\r\n/**\r\n * Converts Gregorian date to Jalali (Persian) date\r\n * \r\n * @param gy Gregorian year\r\n * @param gm Gregorian month (1-12)\r\n * @param gd Gregorian day (1-31)\r\n * @returns Array [year, month, day] with Jalali date\r\n */\r\nexport function gregorianToJalali(gy: number, gm: number, gd: number): [number, number, number] {\r\n  // Implementation based on jalali.js algorithm\r\n  const g_days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n  const j_days_in_month = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29];\r\n  \r\n  gy = parseInt(gy.toString());\r\n  gm = parseInt(gm.toString());\r\n  gd = parseInt(gd.toString());\r\n  \r\n  // Check if year is leap year and adjust February days\r\n  const isLeapYear = (gy % 4 === 0 && gy % 100 !== 0) || (gy % 400 === 0);\r\n  g_days_in_month[1] = isLeapYear ? 29 : 28;\r\n  \r\n  // Convert to days since Gregorian epoch\r\n  let dayOfYear = gd;\r\n  for (let i = 0; i < gm - 1; i++) {\r\n    dayOfYear += g_days_in_month[i];\r\n  }\r\n  \r\n  // Calculate Julian day number\r\n  const jdn = Math.floor((gy + Math.floor((gm - 8) / 6) + 100100) * 1461 / 4)\r\n            + Math.floor(((gm + 9) % 12 + 1) * 153 / 5)\r\n            + gd - 34840408;\r\n  const d = jdn % 1461;\r\n  const jy = Math.floor(jdn / 1461) - 2820 + 474;\r\n  \r\n  // Calculate Jalali year\r\n  const jYear = jy;\r\n  \r\n  // Calculate Jalali month and day\r\n  let dayOfYearJalali = d;\r\n  if (dayOfYearJalali >= 366) {\r\n    dayOfYearJalali -= 366;\r\n    const yearsToAdd = Math.floor(dayOfYearJalali / 365);\r\n    dayOfYearJalali %= 365;\r\n  }\r\n  \r\n  let jMonth = 0;\r\n  let jDay = dayOfYearJalali;\r\n  \r\n  // Find month and day\r\n  while (jDay >= j_days_in_month[jMonth]) {\r\n    jDay -= j_days_in_month[jMonth];\r\n    jMonth++;\r\n  }\r\n  \r\n  return [jYear, jMonth + 1, jDay + 1];\r\n}\r\n\r\n/**\r\n * Converts Hijri date to Jalali date\r\n * \r\n * @param hy Hijri year\r\n * @param hm Hijri month (1-12)\r\n * @param hd Hijri day (1-30)\r\n * @returns Array [year, month, day] with Jalali date\r\n */\r\nexport function hijriToJalali(hy: number, hm: number, hd: number): [number, number, number] {\r\n  // First convert to Gregorian\r\n  const [gy, gm, gd] = hijriToGregorian(hy, hm, hd);\r\n  \r\n  // Then convert to Jalali\r\n  return gregorianToJalali(gy, gm, gd);\r\n}\r\n\r\n/**\r\n * Calculates Jalali date for a Hijri event in the current Persian year\r\n * \r\n * @param currentPersianYear Current Jalali/Persian year\r\n * @param hijriMonth Hijri month (1-12)\r\n * @param hijriDay Hijri day (1-30)\r\n * @returns Array [month, day] with Jalali date or null if the event doesn't occur in the current year\r\n */\r\nexport function getHijriEventDateInJalaliYear(currentPersianYear: number, hijriMonth: number, hijriDay: number): [number, number] | null {\r\n  // Get current date\r\n  const today = new Date();\r\n  \r\n  // Approximate current Hijri year (this is rough approximation, might be off by 1 year)\r\n  const currentHijriYear = Math.floor(currentPersianYear - 621.5 + 0.74 * (currentPersianYear - 621.5)) - 202;\r\n  \r\n  // Try current and next Hijri year (sometimes events span across Persian years)\r\n  for (let yearOffset = 0; yearOffset <= 1; yearOffset++) {\r\n    try {\r\n      const hijriYear = currentHijriYear + yearOffset;\r\n      \r\n      // Get Jalali date for this Hijri event\r\n      const [jYear, jMonth, jDay] = hijriToJalali(hijriYear, hijriMonth, hijriDay);\r\n      \r\n      // Check if the event falls in the requested Persian year\r\n      if (jYear === currentPersianYear) {\r\n        return [jMonth, jDay];\r\n      }\r\n    } catch (error) {\r\n      // Skip any conversion errors and continue\r\n      console.warn(`Error converting Hijri date (${currentHijriYear}, ${hijriMonth}, ${hijriDay})`, error);\r\n    }\r\n  }\r\n  \r\n  // Event doesn't occur in the current Persian year\r\n  return null;\r\n}\r\n\r\n/**\r\n * Gets the estimated Hijri date (Islamic date) for today\r\n * \r\n * @returns An array of [year, month, day] for today's Hijri date\r\n */\r\nexport function getCurrentHijriDate(): [number, number, number] {\r\n  // Get today's Gregorian date\r\n  const today = new Date();\r\n  const gyear = today.getFullYear();\r\n  const gmonth = today.getMonth() + 1;\r\n  const gday = today.getDate();\r\n  \r\n  // Use approximate calculation based on mathematical estimation\r\n  // (This isn't perfectly accurate but works for most contemporary dates)\r\n  \r\n  // Julian date calculation\r\n  const jd = (1461 * (gyear + 4800 + (gmonth - 14) / 12)) / 4 +\r\n           (367 * (gmonth - 2 - 12 * ((gmonth - 14) / 12))) / 12 -\r\n           (3 * ((gyear + 4900 + (gmonth - 14) / 12) / 100)) / 4 +\r\n           gday - 32075;\r\n           \r\n  // Hijri date calculation\r\n  const l = Math.floor(jd) - 1948440 + 10632;\r\n  const n = Math.floor((l - 1) / 10631);\r\n  const l1 = l - 10631 * n + 354;\r\n  const j = (Math.floor((10985 - l1) / 5316)) * (Math.floor((50 * l1) / 17719)) + \r\n           (Math.floor(l1 / 5670)) * (Math.floor((43 * l1) / 15238));\r\n  const l2 = l1 - (Math.floor((30 - j) / 15)) * (Math.floor((17719 * j) / 50)) - \r\n           (Math.floor(j / 16)) * (Math.floor((15238 * j) / 43)) + 29;\r\n           \r\n  const hmonth = Math.floor((24 * l2) / 709);\r\n  const hday = l2 - Math.floor((709 * hmonth) / 24);\r\n  const hyear = 30 * n + j - 30;\r\n  \r\n  return [hyear, hmonth, hday];\r\n}\r\n\r\nexport default {\r\n  hijriToGregorian,\r\n  gregorianToJalali,\r\n  hijriToJalali,\r\n  getHijriEventDateInJalaliYear,\r\n  getCurrentHijriDate\r\n}; ","import { PersianEvent } from '../types';\nimport HijriUtils from './hijri-utils';\nimport { PersianDate } from '../persian-date';\n\n// Fallback events in case JSON loading fails\nconst fallbackEvents: PersianEvent[] = [];\n\n// Initialize empty events array\nlet mappedEvents: PersianEvent[] = [...fallbackEvents];\nlet persianCalendarData: any = {\n  \"Persian Calendar\": [],\n  \"Hijri Calendar\": [],\n  \"Source\": { \"name\": \"Fallback Data\", \"url\": \"\" }\n};\n\n// Add cache and loading state\nlet isLoading = false;\nlet lastFetchYear: number | null = null;\nlet fetchPromise: Promise<void> | null = null;\n\n/**\n * Maps events from the Persian Calendar repo format to our PersianEvent format\n */\nfunction mapPersianCalendarEvents(): PersianEvent[] {\n  try {\n    let allEvents: PersianEvent[] = [];\n    \n    // Process Persian Calendar events\n    if (persianCalendarData && Array.isArray(persianCalendarData[\"Persian Calendar\"])) {\n      const persianEvents = persianCalendarData[\"Persian Calendar\"].map((event: any) => ({\n        title: event.title,\n        month: event.month,\n        day: event.day,\n        type: event.type,\n        holiday: event.holiday\n      }));\n      \n      allEvents = [...persianEvents];\n    }\n    \n    // Process Hijri Calendar events\n    if (persianCalendarData && Array.isArray(persianCalendarData[\"Hijri Calendar\"])) {\n      const hijriEvents = persianCalendarData[\"Hijri Calendar\"].map((event: any) => {\n        // Convert Hijri date to Jalali\n        const jalaliDate = HijriUtils.hijriToJalali(\n          event.year,\n          event.month,\n          event.day\n        );\n        \n        return {\n          title: event.title,\n          month: jalaliDate[1],\n          day: jalaliDate[2],\n          type: event.type,\n          holiday: event.holiday,\n          hijri: {\n            year: event.year,\n            month: event.month,\n            day: event.day\n          }\n        };\n      });\n      \n      allEvents = [...allEvents, ...hijriEvents];\n    }\n    \n    return allEvents;\n  } catch (error) {\n    console.error('Error mapping calendar events:', error);\n    return [...fallbackEvents];\n  }\n}\n\n/**\n * Loads events data from the external JSON file\n */\nasync function loadEventsData(): Promise<void> {\n  // If already loading, return the existing promise\n  if (isLoading) {\n    return fetchPromise!;\n  }\n\n  // Get current year\n  const today = new Date();\n  const jalaliToday = PersianDate.gregorianToJalali(\n    today.getFullYear(),\n    today.getMonth() + 1,\n    today.getDate()\n  );\n  const currentYear = jalaliToday[0];\n\n  // If we already have data for this year, don't fetch again\n  if (lastFetchYear === currentYear) {\n    return;\n  }\n\n  isLoading = true;\n  \n  try {\n    // Try to load the events.json file\n    const response = await fetch('data/events.json');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    persianCalendarData = await response.json();\n    \n    // Update mapped events with the new data\n    const newEvents = mapPersianCalendarEvents();\n    mappedEvents = [...newEvents];\n    \n    // Update last fetch year\n    lastFetchYear = currentYear;\n  } catch (error) {\n    console.error('Error loading events data:', error);\n    // Keep using fallback events\n    mappedEvents = [...fallbackEvents];\n  } finally {\n    isLoading = false;\n    fetchPromise = null;\n  }\n}\n\nclass EventUtils {\n  static async initialize(): Promise<void> {\n    await loadEventsData();\n  }\n\n  static getEvents(month: number, day: number, eventTypes?: string[], includeAllTypes: boolean = false): PersianEvent[] {\n    const events = this.getAllEvents(eventTypes, includeAllTypes);\n    return events.filter(event => \n      event.month === month && \n      event.day === day\n    );\n  }\n\n  static getEvent(month: number, day: number): PersianEvent | undefined {\n    return mappedEvents.find(event => \n      event.month === month && event.day === day\n    );\n  }\n\n  static getEventsForMonth(month: number): PersianEvent[] {\n    return mappedEvents.filter(event => event.month === month);\n  }\n\n  static getEventsForYear(): PersianEvent[] {\n    return mappedEvents;\n  }\n\n  static isHoliday(month: number, day: number, eventTypes?: string[], includeAllTypes: boolean = false): boolean {\n    const events = this.getEvents(month, day, eventTypes, includeAllTypes);\n    return events.some(event => event.holiday === true);\n  }\n\n  static getHolidayTitles(month: number, day: number, eventTypes?: string[], includeAllTypes: boolean = false): string[] {\n    const events = this.getEvents(month, day, eventTypes, includeAllTypes);\n    return events\n      .filter(event => event.holiday === true)\n      .map(event => event.title);\n  }\n\n  static getAllEventTitles(month: number, day: number, eventTypes?: string[], includeAllTypes: boolean = false): string[] {\n    const events = this.getEvents(month, day, eventTypes, includeAllTypes);\n    return events.map(event => event.title);\n  }\n\n  static getAllEvents(eventTypes?: string[], includeAllTypes: boolean = false): PersianEvent[] {\n    if (includeAllTypes) {\n      return [...mappedEvents];\n    }\n    return mappedEvents.filter(event => \n      eventTypes?.includes(event.type) ?? true\n    );\n  }\n\n  static getEventsByType(type: string, includeAllTypes: boolean = false, holidaysOnly: boolean = false): PersianEvent[] {\n    const events = includeAllTypes \n      ? mappedEvents \n      : mappedEvents.filter(event => event.type === type);\n    \n    return holidaysOnly \n      ? events.filter(event => event.holiday === true) \n      : events;\n  }\n\n  static getAllHolidays(eventTypes?: string[], includeAllTypes: boolean = false): PersianEvent[] {\n    const events = this.getAllEvents(eventTypes, includeAllTypes);\n    return events.filter(event => event.holiday === true);\n  }\n\n  static getEventTypes(): string[] {\n    const types = new Set<string>();\n    mappedEvents.forEach(event => types.add(event.type));\n    return Array.from(types);\n  }\n\n  static getSourceMetadata(): { [key: string]: string } {\n    return persianCalendarData.Source || {};\n  }\n\n  static async refreshEvents(): Promise<PersianEvent[]> {\n    // Only refresh if we don't have data for the current year\n    const today = new Date();\n    const jalaliToday = PersianDate.gregorianToJalali(\n      today.getFullYear(),\n      today.getMonth() + 1,\n      today.getDate()\n    );\n    const currentYear = jalaliToday[0];\n\n    if (lastFetchYear !== currentYear) {\n      await loadEventsData();\n    }\n    \n    return [...mappedEvents];\n  }\n}\n\nexport { EventUtils }; ","import { PersianDate } from './persian-date';\nimport { EventUtils } from './utils/event-utils';\nimport { \n  PersianDatePickerElementOptions, \n  PersianDateChangeEvent,\n  DateTuple\n} from './types';\n\n// Complete CSS style definition with all variables\nconst styles = `:host {\n  /* Color scheme */\n  --jdp-primary: #0891b2;\n  --jdp-primary-hover: #0e7490;\n  --jdp-primary-foreground: #ffffff;\n  \n  /* Neutral colors */\n  --jdp-background: #ffffff;\n  --jdp-foreground: #1e293b;\n  --jdp-muted: #f1f5f9;\n  --jdp-muted-foreground: #64748b;\n  --jdp-border: #e2e8f0;\n  --jdp-ring: #0284c7;\n  \n  /* Holiday colors */\n  --jdp-holiday-color: #ef4444;\n  --jdp-holiday-bg: #fee2e2;\n  --jdp-holiday-hover-bg: #fecaca;\n  \n  /* Range selection colors */\n  --jdp-range-bg: rgba(8, 145, 178, 0.1);\n  --jdp-range-color: var(--jdp-foreground);\n  --jdp-range-start-bg: var(--jdp-primary);\n  --jdp-range-start-color: var(--jdp-primary-foreground);\n  --jdp-range-end-bg: var(--jdp-primary);\n  --jdp-range-end-color: var(--jdp-primary-foreground);\n  \n  /* Typography */\n  --jdp-font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n  --jdp-font-size: 14px;\n  --jdp-line-height: 1.5;\n  --jdp-font-weight: 400;\n  --jdp-font-weight-medium: 500;\n  --jdp-day-name-font-size: 12px;\n  --jdp-day-name-font-weight: 400;\n  --jdp-day-font-size: 13px;\n  --jdp-day-font-weight: 400;\n  --jdp-month-year-font-size: 14px;\n  --jdp-month-year-font-weight: 500;\n  \n  /* Spacing */\n  --jdp-spacing-xs: 4px;\n  --jdp-spacing-sm: 8px;\n  --jdp-spacing-md: 16px;\n  --jdp-spacing-lg: 24px;\n  \n  /* Input field */\n  --jdp-input-padding-x: 14px;\n  --jdp-input-padding-y: 10px;\n  --jdp-input-border-width: 1px;\n  --jdp-input-border-color: var(--jdp-border);\n  --jdp-input-border-radius: var(--jdp-border-radius);\n  --jdp-input-focus-ring-width: 2px;\n  --jdp-input-focus-ring-color: rgba(2, 132, 199, 0.25);\n  \n  /* Calendar popup */\n  --jdp-calendar-width: 280px;\n  --jdp-calendar-padding: var(--jdp-spacing-md);\n  --jdp-calendar-border-width: 1px;\n  --jdp-calendar-border-color: var(--jdp-border);\n  --jdp-calendar-border-radius: var(--jdp-border-radius);\n  --jdp-calendar-shadow: 0px 10px 38px -10px rgba(22, 23, 24, 0.35), 0px 10px 20px -15px rgba(22, 23, 24, 0.2);\n  --jdp-calendar-z-index: 10;\n  \n  /* Navigation buttons */\n  --jdp-nav-button-size: 30px;\n  --jdp-nav-button-bg: var(--jdp-muted);\n  --jdp-nav-button-bg-hover: var(--jdp-border);\n  --jdp-nav-button-border-radius: var(--jdp-border-radius);\n  --jdp-nav-arrow-size: 8px;\n  --jdp-nav-arrow-thickness: 2px;\n  --jdp-nav-arrow-color: var(--jdp-foreground);\n  \n  /* Day grid */\n  --jdp-day-cell-size: 32px;\n  --jdp-day-cell-margin: 1px;\n  --jdp-day-cell-border-radius: var(--jdp-border-radius);\n  \n  /* States */\n  --jdp-day-hover-bg: var(--jdp-muted);\n  --jdp-day-selected-bg: var(--jdp-primary);\n  --jdp-day-selected-color: var(--jdp-primary-foreground);\n  --jdp-day-today-border-color: var(--jdp-primary);\n  --jdp-day-today-border-width: 1px;\n  --jdp-day-disabled-opacity: 0.4;\n  \n  /* Animations */\n  --jdp-transition-duration: 0.2s;\n  --jdp-fade-from-y: -4px;\n  --jdp-fade-from-y-reverse: 4px;\n  --jdp-month-transition-duration: 0.3s;\n  \n  /* Layout */\n  --jdp-border-radius: 0.5rem;\n  --jdp-direction: rtl;\n  --jdp-header-gap: var(--jdp-spacing-xs);\n\n  /* Select boxes - default values that can be overridden */\n  --jdp-select-container-gap: 8px;\n  --jdp-select-trigger-height: var(--jdp-nav-button-size);\n  --jdp-select-trigger-bg: var(--jdp-muted);\n  --jdp-select-trigger-max-width: 110px;\n  --jdp-select-month-trigger-max-width: var(--jdp-select-trigger-max-width);\n  --jdp-select-year-trigger-max-width: var(--jdp-select-trigger-max-width);\n  --jdp-select-dropdown-width: auto;\n  --jdp-select-text-overflow: ellipsis;\n  \n  /* Scrollbar styling - thin and subtle */\n  --jdp-scrollbar-width: 4px;\n  --jdp-scrollbar-track: transparent;\n  --jdp-scrollbar-thumb: rgba(0, 0, 0, 0.15);\n  --jdp-scrollbar-thumb-hover: rgba(0, 0, 0, 0.25);\n  --jdp-scrollbar-border-radius: 4px;\n}\n\n* {\n  box-sizing: border-box;\n  direction: var(--jdp-direction);\n}\n\n.picker-container {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  font-family: var(--jdp-font-family);\n  font-size: var(--jdp-font-size);\n  line-height: var(--jdp-line-height);\n  font-weight: var(--jdp-font-weight);\n}\n\ninput {\n  width: 100%;\n  padding: var(--jdp-input-padding-y) var(--jdp-input-padding-x);\n  border-radius: var(--jdp-input-border-radius);\n  border: var(--jdp-input-border-width) solid var(--jdp-input-border-color);\n  font-size: var(--jdp-font-size);\n  line-height: var(--jdp-line-height);\n  font-family: inherit;\n  background-color: var(--jdp-background);\n  color: var(--jdp-foreground);\n  cursor: pointer;\n  outline: none;\n  transition: all var(--jdp-transition-duration) ease;\n  text-align: right;\n}\n\ninput:focus {\n  border-color: var(--jdp-ring);\n  box-shadow: 0 0 0 var(--jdp-input-focus-ring-width) var(--jdp-input-focus-ring-color);\n}\n\n.calendar {\n  display: none;\n  position: absolute;\n  right: 0;\n  width: var(--jdp-calendar-width);\n  background: var(--jdp-background);\n  border: var(--jdp-calendar-border-width) solid var(--jdp-calendar-border-color);\n  border-radius: var(--jdp-calendar-border-radius);\n  box-shadow: var(--jdp-calendar-shadow);\n  padding: var(--jdp-calendar-padding);\n  text-align: center;\n  z-index: var(--jdp-calendar-z-index);\n  touch-action: manipulation;\n  -webkit-user-select: none;\n  user-select: none;\n  transform: translateZ(0);\n  will-change: transform;\n  backface-visibility: hidden;\n  contain: layout style;\n}\n\n.calendar.position-bottom {\n  top: calc(100% + 5px);\n  animation: fadeInFromTop var(--jdp-transition-duration) ease;\n}\n\n.calendar.position-top {\n  bottom: calc(100% + 5px);\n  animation: fadeInFromBottom var(--jdp-transition-duration) ease;\n}\n\n.calendar.visible {\n  display: block;\n}\n\n@keyframes fadeInFromTop {\n  from { opacity: 0; transform: translateY(var(--jdp-fade-from-y)); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes fadeInFromBottom {\n  from { opacity: 0; transform: translateY(var(--jdp-fade-from-y-reverse)); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: var(--jdp-spacing-md);\n  gap: var(--jdp-header-gap, var(--jdp-spacing-xs));\n}\n\n.month-year {\n  font-weight: var(--jdp-month-year-font-weight);\n  font-size: var(--jdp-month-year-font-size);\n  color: var(--jdp-foreground);\n  transition: opacity var(--jdp-transition-duration) ease;\n}\n\n.month-year.fade {\n  opacity: 0;\n}\n\n.days-wrapper {\n  position: relative;\n  touch-action: pan-y;\n  overflow: visible;\n  z-index: 1;\n  contain: layout;\n  isolation: isolate;\n}\n\n.days {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  transition: transform var(--jdp-month-transition-duration) ease, opacity var(--jdp-month-transition-duration) ease;\n  will-change: transform, opacity;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n  position: relative;\n  contain: layout;\n}\n\n.days.slide-left {\n  animation: slideInLeft var(--jdp-month-transition-duration) ease;\n}\n\n.days.slide-right {\n  animation: slideInRight var(--jdp-month-transition-duration) ease;\n}\n\n@keyframes slideInLeft {\n  from { \n    opacity: 0; \n    transform: translateX(-10%) translateZ(0);\n    pointer-events: none;\n  }\n  to { \n    opacity: 1; \n    transform: translateX(0) translateZ(0);\n    pointer-events: auto;\n  }\n}\n\n@keyframes slideInRight {\n  from { \n    opacity: 0; \n    transform: translateX(10%) translateZ(0); \n    pointer-events: none;\n  }\n  to { \n    opacity: 1; \n    transform: translateX(0) translateZ(0);\n    pointer-events: auto;\n  }\n}\n\n.day {\n  position: relative;\n  z-index: 1;\n  touch-action: manipulation;\n  isolation: isolate;\n}\n\n.day:hover {\n  z-index: 2;\n}\n\n.nav-button {\n  background: var(--jdp-nav-button-bg);\n  border: none;\n  border-radius: var(--jdp-nav-button-border-radius);\n  width: var(--jdp-nav-button-size);\n  height: var(--jdp-nav-button-size);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all var(--jdp-transition-duration) ease;\n  position: relative;\n  touch-action: manipulation;\n  will-change: transform, background-color;\n}\n\n.nav-button:hover {\n  background: var(--jdp-nav-button-bg-hover);\n}\n\n.nav-button:active {\n  transform: translateY(1px);\n}\n\n.nav-button::before {\n  content: '';\n  display: block;\n  width: var(--jdp-nav-arrow-size);\n  height: var(--jdp-nav-arrow-size);\n  border-top: var(--jdp-nav-arrow-thickness) solid var(--jdp-nav-arrow-color);\n  border-right: var(--jdp-nav-arrow-thickness) solid var(--jdp-nav-arrow-color);\n  position: absolute;\n}\n\n.nav-button.prev::before {\n  transform: rotate(45deg);\n  right: 11px;\n  left: auto;\n}\n\n.nav-button.next::before {\n  transform: rotate(225deg);\n  left: 11px;\n  right: auto;\n}\n\n.day-names {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  margin-bottom: var(--jdp-spacing-sm);\n}\n\n.day-name {\n  font-size: var(--jdp-day-name-font-size);\n  font-weight: var(--jdp-day-name-font-weight);\n  color: var(--jdp-muted-foreground);\n  padding: var(--jdp-spacing-xs) 0;\n  text-align: center;\n}\n\n.day {\n  aspect-ratio: 1/1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--jdp-day-cell-border-radius);\n  font-size: var(--jdp-day-font-size);\n  font-weight: var(--jdp-day-font-weight);\n  cursor: pointer;\n  transition: var(--jdp-transition-duration) ease;\n  margin: var(--jdp-day-cell-margin);\n  position: relative;\n  touch-action: manipulation;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.day:hover:not(.empty):not(.disabled) {\n  background: var(--jdp-day-hover-bg);\n}\n\n.day.selected {\n  background: var(--jdp-day-selected-bg);\n  color: var(--jdp-day-selected-color);\n}\n\n.day.today:not(.selected) {\n  border: var(--jdp-day-today-border-width) solid var(--jdp-day-today-border-color);\n}\n\n.day.empty {\n  cursor: default;\n}\n\n.day.disabled {\n  opacity: var(--jdp-day-disabled-opacity);\n  cursor: not-allowed;\n}\n\n/* Holiday styles */\n.day.holiday:not(.selected) {\n  color: var(--jdp-holiday-color);\n  background-color: var(--jdp-holiday-bg);\n  font-weight: var(--jdp-font-weight-medium);\n}\n\n.day.holiday:hover:not(.selected):not(.disabled) {\n  background-color: var(--jdp-holiday-hover-bg);\n}\n\n/* Special styling for holidays within a range */\n.day.holiday.in-range {\n  background-color: var(--jdp-range-bg);\n  color: var(--jdp-range-color);\n}\n\n.day.holiday.range-start,\n.day.holiday.range-end {\n  background-color: var(--jdp-range-start-bg);\n  color: var(--jdp-range-start-color);\n}\n\n.day.friday {\n  color: var(--jdp-holiday-color);\n}\n\n.event-tooltip {\n  position: absolute;\n  background: var(--jdp-background);\n  border: 1px solid var(--jdp-border);\n  border-radius: var(--jdp-border-radius);\n  padding: var(--jdp-spacing-sm);\n  width: 200px;\n  box-shadow: var(--jdp-calendar-shadow);\n  text-align: right;\n  font-size: 12px;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity var(--jdp-transition-duration) ease, visibility var(--jdp-transition-duration) ease;\n  pointer-events: none;\n  bottom: 120%;\n  right: 0;\n  transform: translateY(-5px);\n  z-index: 9999;\n}\n\n.event-tooltip.tooltip-visible {\n  opacity: 1;\n  visibility: visible;\n  pointer-events: auto;\n  background: var(--jdp-background);\n}\n\n/* Mobile-specific tooltip positioning */\n@media (max-width: 768px) {\n  .event-tooltip {\n    position: fixed;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 90%;\n    max-width: 300px;\n    max-height: 80vh;\n    overflow-y: auto;\n    bottom: auto;\n    right: auto;\n    background: var(--jdp-background);\n    z-index: 9999;\n  }\n\n  .event-tooltip::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n  }\n}\n\n.event-item {\n  margin-bottom: 4px;\n  padding-bottom: 4px;\n  border-bottom: 1px solid var(--jdp-border);\n  color: var(--jdp-foreground);\n  background: var(--jdp-background);\n}\n\n.event-item:last-child {\n  margin-bottom: 0;\n  padding-bottom: 0;\n  border-bottom: none;\n}\n\n.event-item.holiday {\n  color: var(--jdp-holiday-color);\n}\n\n.event-type-label {\n  display: inline-block;\n  font-size: 10px;\n  padding: 1px 4px;\n  border-radius: 3px;\n  margin-right: 4px;\n  background-color: var(--jdp-muted);\n  color: var(--jdp-muted-foreground);\n}\n\n/* Today button styling */\n.footer {\n  margin-top: var(--jdp-spacing-md);\n  display: flex;\n  justify-content: space-between;\n}\n\n.date-nav-button {\n  background: var(--jdp-muted);\n  border: none;\n  border-radius: var(--jdp-border-radius);\n  padding: var(--jdp-spacing-xs) var(--jdp-spacing-md);\n  font-family: inherit;\n  font-size: var(--jdp-font-size);\n  color: var(--jdp-foreground);\n  cursor: pointer;\n  transition: all var(--jdp-transition-duration) ease;\n  touch-action: manipulation;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.date-nav-button:hover {\n  background: var(--jdp-nav-button-bg-hover);\n}\n\n.date-nav-button:active {\n  transform: translateY(1px);\n}\n\n/* Month/Year selectors - scoped to the component */\n:host .selectors-container {\n  display: flex;\n  gap: var(--jdp-select-container-gap, 8px);\n  position: relative;\n  align-items: var(--jdp-select-container-align, center);\n  justify-content: var(--jdp-select-container-justify, space-between);\n  width: 100%;\n  max-width: calc(100% - var(--jdp-nav-button-size) * 2 - var(--jdp-spacing-sm));\n  margin: 0 var(--jdp-spacing-xs);\n}\n\n:host .custom-select {\n  position: relative;\n  user-select: none;\n  width: 100%;\n  margin: 0 var(--jdp-spacing-xs, 2px);\n}\n\n:host .month-select {\n  margin-left: var(--jdp-month-select-margin-left, 0);\n  margin-right: var(--jdp-month-select-margin-right, 0);\n}\n\n:host .year-select {\n  margin-left: var(--jdp-year-select-margin-left, 0);\n  margin-right: var(--jdp-year-select-margin-right, 0);\n}\n\n:host .select-trigger {\n  display: flex;\n  align-items: center;\n  justify-content: var(--jdp-select-trigger-justify, center);\n  gap: 0 4px;\n  width: 100%;\n  height: var(--jdp-select-trigger-height, var(--jdp-nav-button-size));\n  min-height: var(--jdp-nav-button-size);\n  background-color: var(--jdp-select-trigger-bg, var(--jdp-muted));\n  border: var(--jdp-select-trigger-border-width, 1px) solid var(--jdp-select-trigger-border-color, var(--jdp-border));\n  border-radius: var(--jdp-select-trigger-border-radius, var(--jdp-border-radius));\n  color: var(--jdp-select-trigger-color, var(--jdp-foreground));\n  font-family: inherit;\n  font-size: var(--jdp-select-trigger-font-size, var(--jdp-font-size));\n  line-height: 1;\n  padding: 0 var(--jdp-select-trigger-padding-x, 0);\n  cursor: pointer;\n  transition: all var(--jdp-transition-duration) ease;\n  text-align: var(--jdp-select-trigger-text-align, center);\n  min-width: var(--jdp-select-trigger-min-width, initial);\n  outline: none;\n  font-weight: var(--jdp-select-trigger-font-weight, 500);\n  box-sizing: border-box;\n  max-width: var(--jdp-select-trigger-max-width, 110px);\n}\n\n:host .month-select .select-trigger {\n  max-width: var(--jdp-select-month-trigger-max-width, var(--jdp-select-trigger-max-width));\n}\n\n:host .year-select .select-trigger {\n  max-width: var(--jdp-select-year-trigger-max-width, var(--jdp-select-trigger-max-width));\n}\n\n:host .select-trigger span:first-child {\n  white-space: nowrap;\n  overflow: var(--jdp-select-trigger-overflow, visible);\n  text-overflow: var(--jdp-select-text-overflow, ellipsis);\n  max-width: calc(100% - 24px);\n  display: inline-block;\n  text-align: center;\n  flex: 1;\n}\n\n:host .select-trigger:hover {\n  background-color: var(--jdp-select-trigger-bg-hover, rgba(0, 0, 0, 0.05));\n  border-color: var(--jdp-select-trigger-border-hover, var(--jdp-border));\n}\n\n:host .select-trigger:focus-visible {\n  outline: 2px solid var(--jdp-select-trigger-focus-ring-color, var(--jdp-ring));\n  outline-offset: var(--jdp-select-trigger-focus-ring-offset, 2px);\n}\n\n:host .select-icon {\n  margin-left: var(--jdp-select-icon-margin, var(--jdp-spacing-xs));\n  display: var(--jdp-select-icon-display, none);\n  justify-content: center;\n  align-items: center;\n  transition: transform 0.2s ease;\n  width: var(--jdp-select-icon-size, 12px);\n  height: var(--jdp-select-icon-size, 12px);\n  opacity: var(--jdp-select-icon-opacity, 0.7);\n  flex-shrink: 0;\n}\n\n:host .select-icon svg {\n  width: var(--jdp-select-icon-size, 12px);\n  height: var(--jdp-select-icon-size, 12px);\n}\n\n:host .select-content.open .select-icon {\n  transform: rotate(180deg);\n}\n\n:host .select-content {\n  position: var(--jdp-select-content-position, absolute);\n  top: calc(100% + var(--jdp-select-content-top-offset, 5px));\n  left: 0;\n  width: var(--jdp-select-dropdown-width, 100%);\n  min-width: 100%;\n  background-color: var(--jdp-select-content-bg, var(--jdp-background));\n  border: var(--jdp-select-content-border-width, 1px) solid var(--jdp-select-content-border-color, var(--jdp-border));\n  border-radius: var(--jdp-select-content-border-radius, var(--jdp-border-radius));\n  box-shadow: var(--jdp-select-content-shadow, 0 4px 8px rgba(0,0,0,0.1));\n  z-index: var(--jdp-select-content-z-index, 20);\n  overflow-y: auto;\n  max-height: var(--jdp-select-content-max-height, 200px);\n  display: none;\n  padding: var(--jdp-select-content-padding-y, 0.25rem) var(--jdp-select-content-padding-x, 0);\n  scroll-behavior: smooth;\n  \n  /* Custom scrollbar styling */\n  scrollbar-width: var(--jdp-scrollbar-width-size, none);\n  scrollbar-color: var(--jdp-scrollbar-thumb, rgba(0, 0, 0, 0.15)) var(--jdp-scrollbar-track, transparent);\n}\n\n/* Webkit-based browsers (Chrome, Safari, Edge) */\n:host .select-content::-webkit-scrollbar {\n  width: var(--jdp-scrollbar-width, 4px);\n}\n\n:host .select-content::-webkit-scrollbar-track {\n  background: var(--jdp-scrollbar-track, transparent);\n  border-radius: var(--jdp-scrollbar-border-radius, 4px);\n}\n\n:host .select-content::-webkit-scrollbar-thumb {\n  background-color: var(--jdp-scrollbar-thumb, rgba(0, 0, 0, 0.15));\n  border-radius: var(--jdp-scrollbar-border-radius, 4px);\n}\n\n:host .select-content::-webkit-scrollbar-thumb:hover {\n  background-color: var(--jdp-scrollbar-thumb-hover, rgba(0, 0, 0, 0.25));\n}\n\n:host .select-content.open {\n  display: block;\n  animation: fadeInSelect var(--jdp-select-content-animation-duration, var(--jdp-transition-duration)) ease;\n}\n\n:host .month-select-content {\n  width: var(--jdp-select-month-width, var(--jdp-select-dropdown-width, auto));\n  min-width: 100%;\n}\n\n:host .year-select-content {\n  width: var(--jdp-select-year-width, var(--jdp-select-dropdown-width, auto));\n  min-width: 100%;\n}\n\n:host .select-item {\n  padding: var(--jdp-select-item-padding-y, 0.5rem) var(--jdp-select-item-padding-x, 0.75rem);\n  cursor: pointer;\n  transition: background-color var(--jdp-transition-duration) ease;\n  border-radius: var(--jdp-select-item-border-radius, var(--jdp-select-trigger-border-radius, var(--jdp-border-radius)));\n  margin: var(--jdp-select-item-margin, 0 0.25rem);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: var(--jdp-select-item-max-width, 100%);\n  box-sizing: border-box;\n  text-align: var(--jdp-select-item-text-align, center);\n}\n\n:host .select-item:hover {\n  background-color: var(--jdp-select-item-hover-bg, var(--jdp-day-hover-bg));\n}\n\n:host .select-item.selected {\n  background-color: var(--jdp-select-item-selected-bg, var(--jdp-primary));\n  color: var(--jdp-select-item-selected-color, var(--jdp-primary-foreground));\n  font-weight: var(--jdp-select-item-selected-font-weight, var(--jdp-font-weight-medium));\n  border-radius: var(--jdp-select-item-selected-border-radius, var(--jdp-select-trigger-border-radius, var(--jdp-border-radius)));\n}\n\n@keyframes fadeInSelect {\n  from { opacity: 0; transform: translateY(-5px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* RTL specific styles */\n:host([rtl=\"true\"]) .select-icon,\n:host([dir=\"rtl\"]) .select-icon {\n  margin-left: 0;\n  margin-right: var(--jdp-select-icon-margin, var(--jdp-spacing-xs));\n}\n\n:host([rtl=\"true\"]) .select-item,\n:host([dir=\"rtl\"]) .select-item {\n  text-align: var(--jdp-select-item-text-align, right);\n}\n\n/* Dark mode support using CSS media query for scrollbar */\n@media (prefers-color-scheme: dark) {\n  :host {\n    --jdp-scrollbar-thumb: rgba(124, 124, 124, 0.15);\n    --jdp-scrollbar-thumb-hover: rgba(41, 41, 41, 0.25);\n  }\n}\n\n/* Allow manual dark mode toggle via class-based approach */\n:host(.dark-theme) {\n    --jdp-scrollbar-thumb: rgba(124, 124, 124, 0.15);\n    --jdp-scrollbar-thumb-hover: rgba(41, 41, 41, 0.25);\n}\n\n/* Range selection styles */\n.day.in-range {\n  background-color: var(--jdp-range-bg);\n  color: var(--jdp-range-color);\n  position: relative;\n  z-index: 1;\n}\n\n.day.range-start,\n.day.range-end {\n  background-color: var(--jdp-range-start-bg);\n  color: var(--jdp-range-start-color);\n  position: relative;\n  z-index: 2;\n}\n\n.day.range-start {\n  border-radius: var(--jdp-border-radius) 0 0 var(--jdp-border-radius);\n}\n\n.day.range-end {\n  border-radius: 0 var(--jdp-border-radius) var(--jdp-border-radius) 0;\n}\n\n/* RTL specific range styles */\n:host([rtl=\"true\"]) .day.range-start,\n:host([dir=\"rtl\"]) .day.range-start {\n  border-radius: 0 var(--jdp-border-radius) var(--jdp-border-radius) 0;\n}\n\n:host([rtl=\"true\"]) .day.range-end,\n:host([dir=\"rtl\"]) .day.range-end {\n  border-radius: var(--jdp-border-radius) 0 0 var(--jdp-border-radius);\n}\n\n/* Special handling for single day range */\n.day.range-start.range-end {\n  border-radius: var(--jdp-border-radius);\n}\n\n/* Ensure range styles take precedence over other styles */\n.day.in-range:not(.range-start):not(.range-end) {\n  background-color: var(--jdp-range-bg);\n  color: var(--jdp-range-color);\n}\n\n/* Handle disabled dates in range */\n.day.disabled.in-range {\n  opacity: 0.4;\n  background-color: var(--jdp-range-bg);\n  color: var(--jdp-range-color);\n}\n\n/* Handle holidays in range */\n.day.holiday.in-range:not(.range-start):not(.range-end) {\n  background-color: var(--jdp-range-bg);\n  color: var(--jdp-range-color);\n}\n\n.day.holiday.range-start,\n.day.holiday.range-end {\n  background-color: var(--jdp-range-start-bg);\n  color: var(--jdp-range-start-color);\n}\n`;\n\n// Default holiday types\nconst DEFAULT_HOLIDAY_TYPES = ['Iran','AncientIran', 'International'];\n\n/**\n * Jalali Date Picker Web Component\n * \n * A customizable date picker that follows the Jalali (Persian) calendar.\n * Features include:\n * - Month and year dropdown navigation with 150-year range\n * - Quick today and tomorrow navigation buttons\n * - Touch gesture support for swiping between months\n * - Holiday highlighting with customizable types\n * - Full RTL support\n * - Customizable styling with global CSS variables\n * - Shadcn-like UI with ability to toggle visibility of UI elements\n * - Consistent UI sizing with properly aligned select boxes and buttons\n * \n * Usage:\n * ```html\n * <!-- Basic usage -->\n * <persian-datepicker-element></persian-datepicker-element>\n * \n * <!-- With attributes -->\n * <persian-datepicker-element placeholder=\"انتخاب تاریخ\" format=\"YYYY/MM/DD\"></persian-datepicker-element>\n * \n * <!-- With holiday types -->\n * <persian-datepicker-element holiday-types=\"Iran,Afghanistan,AncientIran,International\"></persian-datepicker-element>\n * \n * <!-- With all holiday types -->\n * <persian-datepicker-element holiday-types=\"all\"></persian-datepicker-element>\n * \n * <!-- With custom Today button text -->\n * <persian-datepicker-element today-button-text=\"Go to Today\"></persian-datepicker-element>\n * \n * <!-- With custom Tomorrow button text -->\n * <persian-datepicker-element tomorrow-button-text=\"Next Day\"></persian-datepicker-element>\n * \n * <!-- With custom button styling -->\n * <persian-datepicker-element today-button-class=\"primary rounded\" tomorrow-button-class=\"secondary rounded\"></persian-datepicker-element>\n * \n * <!-- With styling customization -->\n * <persian-datepicker-element style=\"--jdp-primary: #3b82f6; --jdp-font-family: 'Vazir', sans-serif;\"></persian-datepicker-element>\n *\n * <!-- Hiding specific UI elements -->\n * <persian-datepicker-element \n *   show-prev-button=\"false\"\n *   show-next-button=\"false\"\n *   show-tomorrow-button=\"false\"\n * ></persian-datepicker-element>\n * ```\n * \n * @element persian-datepicker-element\n * \n * @attr {string} placeholder - Placeholder text for the input field\n * @attr {string} format - Date format (e.g., \"YYYY/MM/DD\")\n * @attr {boolean} rtl - Whether to use RTL direction\n * @attr {boolean} show-holidays - Whether to highlight holidays\n * @attr {string} holiday-types - Comma-separated list of holiday types to display (e.g., \"Iran,Afghanistan,AncientIran,International\" or \"all\" to show all available types)\n * @attr {string} today-button-text - Custom text for the Today button (default: \"امروز\")\n * @attr {string} today-button-class - Additional CSS classes for the Today button\n * @attr {string} tomorrow-button-text - Custom text for the Tomorrow button (default: \"فردا\")\n * @attr {string} tomorrow-button-class - Additional CSS classes for the Tomorrow button\n * \n * @attr {boolean} show-month-selector - Whether to show the month selector (default: true)\n * @attr {boolean} show-year-selector - Whether to show the year selector (default: true)\n * @attr {boolean} show-prev-button - Whether to show the previous month button (default: true)\n * @attr {boolean} show-next-button - Whether to show the next month button (default: true)\n * @attr {boolean} show-today-button - Whether to show the Today button (default: true)\n * @attr {boolean} show-tomorrow-button - Whether to show the Tomorrow button (default: true)\n * \n * Styling:\n * The component can be styled using CSS variables. These can be set globally in your CSS\n * or directly on the element using the style attribute. See the component's CSS file\n * for the complete list of available CSS variables.\n */\nexport class PersianDatePickerElement extends HTMLElement {\n  // Private DOM elements\n  private input!: HTMLInputElement;\n  private calendar!: HTMLDivElement;\n  private daysContainer!: HTMLDivElement;\n  private dayNamesContainer!: HTMLDivElement;\n  \n  // Date state\n  private jalaliYear: number = 0;\n  private jalaliMonth: number = 0;\n  private jalaliDay: number = 0;\n  private selectedDate: DateTuple | null = null;\n  \n  // Range selection state\n  private isRangeMode: boolean = false;\n  private rangeStart: DateTuple | null = null;\n  private rangeEnd: DateTuple | null = null;\n  private isSelectingRange: boolean = false;\n  \n  // Configuration\n  private options: PersianDatePickerElementOptions;\n  private showHolidays: boolean = true;\n  private holidayTypes: string[] = [...DEFAULT_HOLIDAY_TYPES];\n  private includeAllTypes: boolean = false;\n  private isTransitioning: boolean = false;\n  private _documentClickHandler: EventListener = () => {};\n  \n  // Static property to track currently open calendar instance\n  private static openCalendarInstance: PersianDatePickerElement | null = null;\n  \n  // Persian month names - defined once to avoid recreation\n  private readonly persianMonths = [\n    \"فروردین\", \"اردیبهشت\", \"خرداد\", \"تیر\", \"مرداد\", \"شهریور\",\n    \"مهر\", \"آبان\", \"آذر\", \"دی\", \"بهمن\", \"اسفند\"\n  ];\n\n  // Add mapping for holiday type labels\n  private readonly holidayTypeLabels: { [key: string]: string } = {\n    'Iran': 'ایران',\n    'Afghanistan': 'افغانستان',\n    'AncientIran': 'ایران باستان',\n    'International': 'بین‌المللی'\n  };\n\n  // Add format and limits properties\n  private format: string = 'YYYY/MM/DD';\n  private minDate: DateTuple | null = null;\n  private maxDate: DateTuple | null = null;\n  private disabledDatesFn: ((year: number, month: number, day: number) => boolean) | null = null;\n\n  // Add helper function to convert numbers to Persian numerals\n  private toPersianNum(num: number | string): string {\n    const persianDigits = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\n    return num.toString().replace(/\\d/g, x => persianDigits[parseInt(x)]);\n  }\n\n  static get observedAttributes() {\n    return [\n      'placeholder', \n      'rtl', \n      'format', \n      'show-holidays',\n      'holiday-types',\n      'today-button-text',\n      'today-button-class',\n      'tomorrow-button-text',\n      'tomorrow-button-class',\n      'min-date',\n      'max-date',\n      'disabled-dates',\n      'range-mode', // Add new attribute\n      // UI visibility props\n      'show-month-selector',\n      'show-year-selector',\n      'show-prev-button',\n      'show-next-button',\n      'show-today-button',\n      'show-tomorrow-button'\n    ];\n  }\n\n  constructor(options: PersianDatePickerElementOptions = {}) {\n    super();\n    this.options = options;\n    \n    // Create shadow DOM and render initial structure\n    const shadow = this.attachShadow({ mode: \"open\" });\n    this.render(shadow);\n    \n    // Set holiday types if provided in options\n    if (options.holidayTypes) {\n      this.setHolidayTypes(options.holidayTypes);\n    }\n  }\n\n  async connectedCallback() {\n    try {\n      if (!this.shadowRoot) {\n        console.error(\"Shadow root not available\");\n        return;\n      }\n\n      // Initialize DOM references\n      this.initializeDomReferences();\n      \n      // Initialize with today's date\n      this.initializeCurrentDate();\n      \n      // Initialize events data\n      await EventUtils.initialize();\n      \n      // Setup initial UI components\n      this.initializeUIComponents();\n      \n      // Set up event listeners\n      this.addEventListeners();\n      \n      // Initialize touch gesture support\n      this.initTouchGestures();\n      \n      // Update the UI with the current date\n      this.renderCalendar();\n    } catch (error) {\n      console.error(\"Error in connectedCallback:\", error);\n    }\n  }\n\n  disconnectedCallback() {\n    // Clean up event listeners to prevent memory leaks\n    if (this._documentClickHandler) {\n      document.removeEventListener(\"click\", this._documentClickHandler);\n    }\n    \n    // Clean up the openCalendarInstance if this element is being removed\n    if (PersianDatePickerElement.openCalendarInstance === this) {\n      PersianDatePickerElement.openCalendarInstance = null;\n    }\n    \n    // Clean up any references that could cause memory leaks\n    const elements = [this.input, this.calendar, this.daysContainer, this.dayNamesContainer];\n    elements.forEach(element => {\n      if (element) {\n        const clone = element.cloneNode(false);\n        if (element.parentNode) {\n          element.parentNode.replaceChild(clone, element);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handle attribute changes\n   */\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (oldValue === newValue) return;\n    \n    // Early return if element is not fully initialized\n    if (!this.shadowRoot) return;\n    \n    switch (name) {\n      case 'placeholder':\n        if (this.input) this.input.placeholder = newValue || '';\n        break;\n        \n      case 'rtl':\n        const rtl = newValue !== null && newValue !== 'false';\n        this.style.setProperty('--jdp-direction', rtl ? 'rtl' : 'ltr');\n        break;\n        \n      case 'show-holidays':\n        this.showHolidays = newValue !== null && newValue !== 'false';\n        if (this.calendar) {\n          this.renderCalendar();\n        }\n        break;\n        \n      case 'holiday-types':\n        if (newValue) {\n          this.setHolidayTypes(newValue);\n        } else {\n          this.holidayTypes = [...DEFAULT_HOLIDAY_TYPES];\n          this.includeAllTypes = false;\n        }\n        if (this.calendar) {\n          this.renderCalendar();\n        }\n        break;\n        \n      case 'format':\n        if (newValue && this.isValidFormat(newValue)) {\n          this.format = newValue;\n          // Ensure the format is applied immediately\n          if (this.selectedDate) {\n            this.formatAndSetValue();\n          }\n        }\n        break;\n\n      case 'min-date':\n        if (newValue) {\n          try {\n            const [year, month, day] = JSON.parse(newValue);\n            this.setMinDate(year, month, day);\n          } catch (e) {\n            console.error('Invalid min-date format');\n          }\n        } else {\n          this.minDate = null;\n        }\n        if (this.calendar) {\n          this.renderCalendar();\n        }\n        break;\n\n      case 'max-date':\n        if (newValue) {\n          try {\n            const [year, month, day] = JSON.parse(newValue);\n            this.setMaxDate(year, month, day);\n          } catch (e) {\n            console.error('Invalid max-date format');\n          }\n        } else {\n          this.maxDate = null;\n        }\n        if (this.calendar) {\n          this.renderCalendar();\n        }\n        break;\n\n      case 'disabled-dates':\n        if (newValue) {\n          const disabledFn = (window as any)[newValue];\n          if (typeof disabledFn === 'function') {\n            this.disabledDatesFn = disabledFn;\n          }\n        } else {\n          this.disabledDatesFn = null;\n        }\n        if (this.calendar) {\n          this.renderCalendar();\n        }\n        break;\n        \n      case 'today-button-text':\n      case 'tomorrow-button-text':\n        this.updateButtonText(name, newValue);\n        break;\n        \n      case 'today-button-class':\n      case 'tomorrow-button-class':\n        this.updateButtonClass(name, newValue);\n        break;\n        \n      case 'range-mode':\n        this.isRangeMode = newValue !== null && newValue !== 'false';\n        if (this.calendar) {\n          this.renderCalendar();\n        }\n        break;\n        \n      // Visibility attributes that require re-rendering\n      case 'show-month-selector':\n      case 'show-year-selector':\n      case 'show-prev-button':\n      case 'show-next-button':\n      case 'show-today-button':\n      case 'show-tomorrow-button':\n        // Re-create the shadow DOM with updated visibility settings\n        if (this.shadowRoot) {\n          this.render(this.shadowRoot);\n          // Re-initialize after re-rendering\n          this.initializeDomReferences();\n          this.initializeUIComponents();\n          this.addEventListeners();\n          this.renderCalendar();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Helper to update button text from attributes\n   */\n  private updateButtonText(attrName: string, newValue: string): void {\n    if (!this.shadowRoot) return;\n    \n    const buttonId = attrName === 'today-button-text' ? 'today-button' : 'tomorrow-button';\n    const defaultText = attrName === 'today-button-text' ? 'امروز' : 'فردا';\n    \n    const button = this.shadowRoot.getElementById(buttonId);\n    if (button) {\n      button.textContent = newValue || defaultText;\n    }\n  }\n\n  /**\n   * Helper to update button class from attributes\n   */\n  private updateButtonClass(attrName: string, newValue: string): void {\n    if (!this.shadowRoot) return;\n    \n    const buttonId = attrName === 'today-button-class' ? 'today-button' : 'tomorrow-button';\n    const baseClass = attrName === 'today-button-class' ? 'today-button' : 'tomorrow-button';\n    \n    const button = this.shadowRoot.getElementById(buttonId);\n    if (button) {\n      // Reset to base class\n      button.className = `date-nav-button ${baseClass}`;\n      \n      // Add new classes if provided\n      if (newValue) {\n        newValue.split(' ').forEach(className => {\n          if (className.trim()) {\n            button.classList.add(className.trim());\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Initialize DOM references for the component\n   */\n  private initializeDomReferences(): void {\n    if (!this.shadowRoot) return;\n    \n    // Get required DOM elements\n    this.input = this.shadowRoot.getElementById(\"date-input\") as HTMLInputElement;\n    this.calendar = this.shadowRoot.getElementById(\"calendar\") as HTMLDivElement;\n    this.daysContainer = this.shadowRoot.getElementById(\"days-container\") as HTMLDivElement;\n    this.dayNamesContainer = this.shadowRoot.getElementById(\"day-names\") as HTMLDivElement;\n\n    if (!this.input || !this.calendar || !this.daysContainer || !this.dayNamesContainer) {\n      throw new Error(\"Failed to initialize required elements\");\n    }\n    \n    // Set placeholder if provided in options\n    if (this.options.placeholder) {\n      this.input.placeholder = this.options.placeholder;\n    } else {\n      // Apply placeholder from attribute if set\n      const placeholder = this.getAttribute('placeholder');\n      if (placeholder) {\n        this.input.placeholder = placeholder;\n      }\n    }\n  }\n\n  /**\n   * Initialize the current date to today's Jalali date\n   */\n  private initializeCurrentDate(): void {\n    const today = new Date();\n    const jalaliToday = PersianDate.gregorianToJalali(\n      today.getFullYear(),\n      today.getMonth() + 1,\n      today.getDate()\n    );\n\n    this.jalaliYear = jalaliToday[0];\n    this.jalaliMonth = jalaliToday[1];\n    this.jalaliDay = jalaliToday[2];\n    this.selectedDate = null;\n  }\n\n  /**\n   * Initialize UI components like day names and selectors\n   */\n  private initializeUIComponents(): void {\n    // Initialize day names\n    this.initializeDayNames();\n    \n    // Setup month and year selectors\n    this.setupMonthYearSelectors();\n    \n    // Refresh events for correct Jalali dates\n    EventUtils.refreshEvents();\n  }\n\n  /**\n   * Helper to initialize day names\n   */\n  private initializeDayNames(): void {\n    if (!this.dayNamesContainer) return;\n    \n    // Clear any existing content\n    this.dayNamesContainer.innerHTML = \"\";\n    \n    // Initialize the day names (Saturday to Friday in Persian)\n    const dayNames = [\"ش\", \"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\"];\n    dayNames.forEach(name => {\n      const dayNameEl = document.createElement(\"div\");\n      dayNameEl.classList.add(\"day-name\");\n      dayNameEl.textContent = name;\n      this.dayNamesContainer.appendChild(dayNameEl);\n    });\n  }\n\n  /**\n   * Setup month and year selector dropdowns\n   */\n  private setupMonthYearSelectors(): void {\n    if (!this.shadowRoot) return;\n    \n    // Get elements\n    const monthSelectTrigger = this.shadowRoot.getElementById(\"month-select-trigger\") as HTMLButtonElement | null;\n    const yearSelectTrigger = this.shadowRoot.getElementById(\"year-select-trigger\") as HTMLButtonElement | null;\n    const monthSelectValue = this.shadowRoot.getElementById(\"month-select-value\") as HTMLSpanElement | null;\n    const yearSelectValue = this.shadowRoot.getElementById(\"year-select-value\") as HTMLSpanElement | null;\n    const monthSelectContent = this.shadowRoot.getElementById(\"month-select-content\") as HTMLDivElement | null;\n    const yearSelectContent = this.shadowRoot.getElementById(\"year-select-content\") as HTMLDivElement | null;\n    \n    // Exit early if any element is missing\n    if (!monthSelectTrigger || !yearSelectTrigger || !monthSelectValue || \n        !yearSelectValue || !monthSelectContent || !yearSelectContent) {\n      console.error(\"Failed to initialize month/year selectors\");\n      return;\n    }\n    \n    // Clear existing options\n    monthSelectContent.innerHTML = \"\";\n    yearSelectContent.innerHTML = \"\";\n    \n    // Setup month options\n    this.persianMonths.forEach((month, index) => {\n      const monthValue = index + 1;\n      const monthItem = document.createElement(\"div\");\n      monthItem.classList.add(\"select-item\");\n      monthItem.textContent = month;\n      monthItem.dataset.value = monthValue.toString();\n      \n      if (monthValue === this.jalaliMonth) {\n        monthItem.classList.add(\"selected\");\n        monthSelectValue.textContent = month;\n      }\n      \n      monthItem.addEventListener(\"click\", (e) => {\n        e.stopPropagation(); // Stop event propagation\n        this.handleMonthChange(monthValue, month);\n        this.closeAllDropdowns();\n      });\n      \n      monthSelectContent.appendChild(monthItem);\n    });\n    \n    // Setup year options\n    // Get current year range\n    const today = new Date();\n    const jalaliToday = PersianDate.gregorianToJalali(\n      today.getFullYear(), \n      today.getMonth() + 1, \n      today.getDate()\n    );\n    \n    const currentJalaliYear = jalaliToday[0];\n    const startYear = currentJalaliYear - 100;\n    const endYear = currentJalaliYear + 50;\n    \n    for (let year = startYear; year <= endYear; year++) {\n      const yearItem = document.createElement(\"div\");\n      yearItem.classList.add(\"select-item\");\n      yearItem.textContent = this.toPersianNum(year);\n      yearItem.dataset.value = year.toString();\n      \n      if (year === this.jalaliYear) {\n        yearItem.classList.add(\"selected\");\n        yearSelectValue.textContent = this.toPersianNum(year);\n      }\n      \n      yearItem.addEventListener(\"click\", (e) => {\n        e.stopPropagation(); // Stop event propagation\n        this.handleYearChange(year);\n        this.closeAllDropdowns();\n      });\n      \n      yearSelectContent.appendChild(yearItem);\n    }\n    \n    // Add toggle event listeners to triggers\n    monthSelectTrigger.addEventListener(\"click\", (e) => {\n      e.stopPropagation();\n      this.toggleDropdown(monthSelectContent);\n    });\n    \n    yearSelectTrigger.addEventListener(\"click\", (e) => {\n      e.stopPropagation();\n      this.toggleDropdown(yearSelectContent);\n    });\n    \n    // Prevent event bubbling from the content containers\n    monthSelectContent.addEventListener(\"click\", (e) => {\n      e.stopPropagation();\n    });\n    \n    yearSelectContent.addEventListener(\"click\", (e) => {\n      e.stopPropagation();\n    });\n  }\n\n  // Add all needed event listeners\n  private addEventListeners(): void {\n    if (!this.shadowRoot || !this.input || !this.calendar) return;\n    \n    // Input click event to toggle calendar\n    this.input.addEventListener(\"click\", this.handleInputClick);\n    \n    // Button event listeners\n    this.setupNavigationButtons();\n    \n    // Prevent clicks inside the calendar from bubbling up\n    this.calendar.addEventListener(\"click\", e => e.stopPropagation());\n    \n    // Close dropdowns when clicking on empty space in calendar\n    this.calendar.addEventListener(\"click\", e => {\n      const target = e.target as HTMLElement;\n      // If the click was not on a select-trigger element or select-content element, close all dropdowns\n      if (!target.closest('.select-trigger') && !target.closest('.select-content')) {\n        this.closeAllDropdowns();\n      }\n    });\n    \n    // Document click handler to close calendar when clicking outside\n    this._documentClickHandler = this.handleDocumentClick.bind(this);\n    document.addEventListener(\"click\", this._documentClickHandler);\n  }\n\n  /**\n   * Handle input field click\n   */\n  private handleInputClick = (e: MouseEvent): void => {\n    e.stopPropagation();\n    this.toggleCalendar();\n  }\n\n  /**\n   * Handle document clicks to close the calendar when clicking outside\n   */\n  private handleDocumentClick = (e: Event): void => {\n    if (!this.calendar || !this.calendar.classList.contains(\"visible\")) return;\n    \n    const path = e.composedPath();\n    if (!path.includes(this)) {\n      this.closeAllDropdowns();\n      this.toggleCalendar();\n    }\n  }\n\n  /**\n   * Setup navigation buttons (prev, next, today, tomorrow)\n   */\n  private setupNavigationButtons(): void {\n    if (!this.shadowRoot) return;\n    \n    const prevMonthBtn = this.shadowRoot.getElementById(\"prev-month\");\n    const nextMonthBtn = this.shadowRoot.getElementById(\"next-month\");\n    const todayBtn = this.shadowRoot.getElementById(\"today-button\");\n    const tomorrowBtn = this.shadowRoot.getElementById(\"tomorrow-button\");\n    \n    // Helper function to add click handler with stopPropagation\n    const addClickHandler = (element: HTMLElement | null, handler: () => void): void => {\n      if (element) {\n        element.addEventListener(\"click\", (e) => {\n          e.stopPropagation();\n          \n          // Close any open dropdowns when navigation buttons are clicked\n          this.closeAllDropdowns();\n          \n          handler();\n        });\n      }\n    };\n    \n    addClickHandler(prevMonthBtn, () => this.changeMonth(-1));\n    addClickHandler(nextMonthBtn, () => this.changeMonth(1));\n    addClickHandler(todayBtn, () => this.goToToday());\n    addClickHandler(tomorrowBtn, () => this.goToTomorrow());\n  }\n\n  /**\n   * Sets the holiday types to be displayed\n   * @param types - Comma-separated string or array of holiday types (e.g., \"Iran,Afghanistan,AncientIran,International\")\n   */\n  setHolidayTypes(types: string | string[]): void {\n    if (typeof types === 'string') {\n      // Special case for \"all\" which includes all types\n      if (types.toLowerCase() === 'all') {\n        this.includeAllTypes = true;\n        this.holidayTypes = [...EventUtils.getEventTypes()]; // Get all available types\n        return;\n      }\n      \n      // Parse comma-separated values\n      this.holidayTypes = types.split(',').map(t => t.trim()).filter(Boolean);\n    } else if (Array.isArray(types)) {\n      this.holidayTypes = [...types];\n    } else {\n      this.holidayTypes = [...DEFAULT_HOLIDAY_TYPES];\n    }\n    \n    // Set includeAllTypes to false by default\n    this.includeAllTypes = false;\n    \n    // If the calendar is already rendered, update it\n    if (this.calendar) {\n      this.renderCalendar();\n    }\n  }\n  \n  /**\n   * Gets the current holiday types being displayed\n   */\n  getHolidayTypes(): string[] {\n    return [...this.holidayTypes];\n  }\n  \n  /**\n   * Checks if all types are being shown\n   */\n  isShowingAllTypes(): boolean {\n    return this.includeAllTypes;\n  }\n\n  /**\n   * Render the initial component HTML\n   */\n  private render(shadow: ShadowRoot) {\n    // Get button text from attributes or use defaults\n    const todayButtonText = this.getAttribute('today-button-text') || 'امروز';\n    const todayButtonClass = this.getAttribute('today-button-class') || '';\n    const tomorrowButtonText = this.getAttribute('tomorrow-button-text') || 'فردا';\n    const tomorrowButtonClass = this.getAttribute('tomorrow-button-class') || '';\n    \n    // Check visibility attributes (defaults to true if not specified)\n    const showMonthSelector = this.getAttribute('show-month-selector') !== 'false';\n    const showYearSelector = this.getAttribute('show-year-selector') !== 'false';\n    const showPrevButton = this.getAttribute('show-prev-button') !== 'false';\n    const showNextButton = this.getAttribute('show-next-button') !== 'false';\n    const showTodayButton = this.getAttribute('show-today-button') !== 'false';\n    const showTomorrowButton = this.getAttribute('show-tomorrow-button') !== 'false';\n    \n    // SVG for dropdown icon\n    const chevronSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"m6 9 6 6 6-6\"/></svg>`;\n    \n    shadow.innerHTML = `\n      <style>${styles}</style>\n      <div class=\"picker-container\">\n        <input type=\"text\" id=\"date-input\" readonly placeholder=\"انتخاب تاریخ\">\n        <div class=\"calendar\" id=\"calendar\">\n          <div class=\"header\">\n            ${showPrevButton ? `<button id=\"prev-month\" type=\"button\" class=\"nav-button prev\"></button>` : ''}\n            <div class=\"selectors-container\">\n              ${showMonthSelector ? `\n              <div class=\"custom-select month-select\" id=\"month-select-container\">\n                <button type=\"button\" class=\"select-trigger\" id=\"month-select-trigger\">\n                  <span id=\"month-select-value\"></span>\n                  <span class=\"select-icon\">${chevronSVG}</span>\n                </button>\n                <div class=\"select-content month-select-content\" id=\"month-select-content\"></div>\n              </div>\n              ` : ''}\n              ${showYearSelector ? `\n              <div class=\"custom-select year-select\" id=\"year-select-container\">\n                <button type=\"button\" class=\"select-trigger\" id=\"year-select-trigger\">\n                  <span id=\"year-select-value\"></span>\n                  <span class=\"select-icon\">${chevronSVG}</span>\n                </button>\n                <div class=\"select-content year-select-content\" id=\"year-select-content\"></div>\n              </div>\n              ` : ''}\n            </div>\n            ${showNextButton ? `<button id=\"next-month\" type=\"button\" class=\"nav-button next\"></button>` : ''}\n          </div>\n          <div class=\"day-names\" id=\"day-names\"></div>\n          <div class=\"days-wrapper\">\n            <div class=\"days\" id=\"days-container\"></div>\n          </div>\n          <div class=\"footer\">\n            ${showTodayButton ? `<button id=\"today-button\" type=\"button\" class=\"date-nav-button today-button ${todayButtonClass}\">${todayButtonText}</button>` : ''}\n            ${showTomorrowButton ? `<button id=\"tomorrow-button\" type=\"button\" class=\"date-nav-button tomorrow-button ${tomorrowButtonClass}\">${tomorrowButtonText}</button>` : ''}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Toggle calendar visibility\n   */\n  toggleCalendar() {\n    // First close any open dropdowns\n    this.closeAllDropdowns();\n    \n    // Check if this calendar is already open\n    if (this.calendar.classList.contains(\"visible\")) {\n      // Hide calendar\n      this.calendar.classList.remove(\"visible\", \"position-bottom\", \"position-top\");\n      \n      // Clear the static reference if this instance is being closed\n      if (PersianDatePickerElement.openCalendarInstance === this) {\n        PersianDatePickerElement.openCalendarInstance = null;\n      }\n    } else {\n      // Close any already open calendar instance\n      if (PersianDatePickerElement.openCalendarInstance && \n          PersianDatePickerElement.openCalendarInstance !== this) {\n        PersianDatePickerElement.openCalendarInstance.toggleCalendar();\n      }\n      \n      // Show calendar with position calculation\n      this.positionCalendar();\n      this.calendar.classList.add(\"visible\");\n      \n      // Set this as the currently open instance\n      PersianDatePickerElement.openCalendarInstance = this;\n    }\n  }\n\n  /**\n   * Calculate and set the optimal position for the calendar\n   */\n  private positionCalendar(): void {\n    if (!this.input || !this.calendar) return;\n    \n    // Reset position classes\n    this.calendar.classList.remove(\"position-bottom\", \"position-top\");\n    \n    // Get measurements without causing reflow\n    const inputRect = this.input.getBoundingClientRect();\n    const windowHeight = window.innerHeight;\n    \n    // Default to position-bottom (most common)\n    this.calendar.classList.add(\"position-bottom\");\n    \n    // Set display block but with visibility hidden to measure without showing\n    const originalVisibility = this.calendar.style.visibility;\n    const originalDisplay = this.calendar.style.display;\n    this.calendar.style.visibility = 'hidden';\n    this.calendar.style.display = 'block';\n    \n    // Now we can measure once display is set\n    const calendarHeight = this.calendar.offsetHeight;\n    \n    // Check if there's enough space below\n    const spaceBelow = windowHeight - inputRect.bottom;\n    if (spaceBelow < calendarHeight) {\n      // Not enough space below, check if there's more space above\n      const spaceAbove = inputRect.top;\n      if (spaceAbove > spaceBelow || spaceAbove >= calendarHeight) {\n        // Switch to position-top\n        this.calendar.classList.remove(\"position-bottom\");\n        this.calendar.classList.add(\"position-top\");\n      }\n    }\n    \n    // Restore original styles\n    this.calendar.style.visibility = originalVisibility;\n    this.calendar.style.display = originalDisplay;\n  }\n\n  /**\n   * Change to previous or next month\n   */\n  changeMonth(direction: number) {\n    // Prevent multiple transitions at once\n    if (this.isTransitioning) return;\n    this.isTransitioning = true;\n    \n    // Cache reference to calendar elements\n    const daysContainer = this.daysContainer;\n    \n    // Add transition class based on direction\n    const slideClass = direction > 0 ? 'slide-left' : 'slide-right';\n    daysContainer.classList.add(slideClass);\n    \n    // Update month and year values\n    this.jalaliMonth = Number(this.jalaliMonth) + direction;\n    if (this.jalaliMonth < 1) {\n      this.jalaliMonth = 12;\n      this.jalaliYear--;\n    } else if (this.jalaliMonth > 12) {\n      this.jalaliMonth = 1;\n      this.jalaliYear++;\n    }\n    \n    // Use requestAnimationFrame for better timing and smoother animation\n    requestAnimationFrame(() => {\n      // Set a timeout to actually update the calendar\n      setTimeout(() => {\n        // Update month/year selectors\n        this.updateMonthYearSelectors();\n        \n        // Clear days container and render new content\n        daysContainer.innerHTML = \"\";\n        this.renderCalendarContent();\n        \n        // Remove slide class after the animation duration\n        requestAnimationFrame(() => {\n          daysContainer.classList.remove(slideClass);\n          \n          // Set a brief timeout to ensure animation is truly done\n          setTimeout(() => {\n            this.isTransitioning = false;\n          }, 50);\n        });\n      }, 200); // Shorter than the CSS animation duration for better feel\n    });\n  }\n\n  /**\n   * Update the month and year selector UI elements\n   */\n  private updateMonthYearSelectors(): void {\n    if (!this.shadowRoot) return;\n    \n    const monthSelectValue = this.shadowRoot.getElementById(\"month-select-value\") as HTMLSpanElement;\n    const yearSelectValue = this.shadowRoot.getElementById(\"year-select-value\") as HTMLSpanElement;\n    \n    if (monthSelectValue) {\n      monthSelectValue.textContent = this.persianMonths[this.jalaliMonth - 1];\n    }\n    \n    if (yearSelectValue) {\n      yearSelectValue.textContent = this.toPersianNum(this.jalaliYear);\n    }\n    \n    // Update selected items in dropdowns\n    const monthItems = this.shadowRoot.querySelectorAll(\".month-select-content .select-item\");\n    monthItems.forEach(item => {\n      if (item.getAttribute(\"data-value\") === this.jalaliMonth.toString()) {\n        item.classList.add(\"selected\");\n      } else {\n        item.classList.remove(\"selected\");\n      }\n    });\n    \n    const yearItems = this.shadowRoot.querySelectorAll(\".year-select-content .select-item\");\n    yearItems.forEach(item => {\n      if (item.getAttribute(\"data-value\") === this.jalaliYear.toString()) {\n        item.classList.add(\"selected\");\n      } else {\n        item.classList.remove(\"selected\");\n      }\n    });\n  }\n\n  /**\n   * Render the calendar with current month/year\n   */\n  renderCalendar() {\n    if (!this.shadowRoot || !this.daysContainer) return;\n    \n    // Update month and year selectors\n    this.updateMonthYearSelectors();\n\n    // Clear previous days\n    this.daysContainer.innerHTML = \"\";\n\n    // Render the calendar content\n    this.renderCalendarContent();\n  }\n  \n  /**\n   * Renders the calendar content for the current month\n   */\n  private renderCalendarContent(): void {\n    if (!this.daysContainer) return;\n    \n    // Get first day of month and number of days\n    const firstDayOfMonth = PersianDate.getDayOfWeek(this.jalaliYear, this.jalaliMonth, 1);\n    const daysInMonth = PersianDate.getDaysInMonth(this.jalaliYear, this.jalaliMonth);\n    \n    // Get today's date for highlighting\n    const today = new Date();\n    const jalaliToday = PersianDate.gregorianToJalali(\n      today.getFullYear(), \n      today.getMonth() + 1, \n      today.getDate()\n    );\n    \n    // Adjust first day of month for Persian calendar (Saturday is first day of week)\n    const adjustedFirstDay = (firstDayOfMonth + 1) % 7;\n    \n    // Clear the container\n    this.daysContainer.innerHTML = \"\";\n    \n    // Add empty cells for days before the first day of month\n    for (let i = 0; i < adjustedFirstDay; i++) {\n      const emptyDay = document.createElement(\"div\");\n      emptyDay.classList.add(\"day\", \"empty\");\n      this.daysContainer.appendChild(emptyDay);\n    }\n\n    // Generate days of month\n    for (let i = 1; i <= daysInMonth; i++) {\n      const dayElement = document.createElement(\"div\");\n      dayElement.classList.add(\"day\");\n      dayElement.textContent = this.toPersianNum(i);\n      \n      // Check if date is in range and not disabled\n      const isInRange = this.isDateInRange(this.jalaliYear, this.jalaliMonth, i);\n      const isDisabled = this.isDateDisabled(this.jalaliYear, this.jalaliMonth, i);\n      \n      if (!isInRange || isDisabled) {\n        dayElement.classList.add(\"disabled\");\n        dayElement.style.opacity = \"0.4\";\n        dayElement.style.cursor = \"not-allowed\";\n      } else {\n        // Add hover handler for tooltips\n        this.setupDayTooltips(dayElement);\n        \n        // Add click handler\n        this.setupDayClickHandler(dayElement, i);\n      }\n      \n      // Highlight today\n      if (this.jalaliYear === jalaliToday[0] && this.jalaliMonth === jalaliToday[1] && i === jalaliToday[2]) {\n        dayElement.classList.add(\"today\");\n      }\n      \n      // Handle range selection highlighting\n      if (this.isRangeMode) {\n        const currentDate: DateTuple = [this.jalaliYear, this.jalaliMonth, i];\n        \n        // First remove any existing range classes\n        dayElement.classList.remove(\"in-range\", \"range-start\", \"range-end\");\n        \n        if (this.rangeStart && this.rangeEnd) {\n          // Complete range - check if current date is between start and end\n          const isInRange = this.compareDates(currentDate, this.rangeStart) >= 0 && \n                           this.compareDates(currentDate, this.rangeEnd) <= 0;\n          \n          // Handle start date\n          if (this.compareDates(currentDate, this.rangeStart) === 0) {\n            dayElement.classList.add(\"range-start\");\n            // If start and end are the same date, add both classes\n            if (this.compareDates(currentDate, this.rangeEnd) === 0) {\n              dayElement.classList.add(\"range-end\");\n            }\n          }\n          // Handle end date\n          else if (this.compareDates(currentDate, this.rangeEnd) === 0) {\n            dayElement.classList.add(\"range-end\");\n          }\n          // Handle dates in between\n          else if (isInRange) {\n            dayElement.classList.add(\"in-range\");\n          }\n        } else if (this.rangeStart && !this.rangeEnd) {\n          // Selecting range - only highlight start date\n          if (this.compareDates(currentDate, this.rangeStart) === 0) {\n            dayElement.classList.add(\"range-start\");\n          }\n        }\n      } else if (this.selectedDate && \n          this.jalaliYear === this.selectedDate[0] && \n          this.jalaliMonth === this.selectedDate[1] && \n          i === this.selectedDate[2]) {\n        dayElement.classList.add(\"selected\");\n      }\n      \n      // Add holiday information if enabled\n      if (this.showHolidays) {\n        this.addHolidayInfo(dayElement, i);\n      }\n      \n      this.daysContainer.appendChild(dayElement);\n    }\n  }\n\n  /**\n   * Compare two dates in [year, month, day] format\n   * Returns -1 if date1 < date2, 0 if date1 = date2, 1 if date1 > date2\n   */\n  private compareDates(date1: DateTuple, date2: DateTuple): number {\n    // First compare years\n    if (date1[0] !== date2[0]) {\n      return date1[0] - date2[0];\n    }\n    \n    // Then compare months\n    if (date1[1] !== date2[1]) {\n      return date1[1] - date2[1];\n    }\n    \n    // Finally compare days\n    return date1[2] - date2[2];\n  }\n\n  /**\n   * Set up tooltip handling for a day element\n   */\n  private setupDayTooltips(dayElement: HTMLElement): void {\n    // Add hover handler for desktop tooltips\n    dayElement.addEventListener(\"mouseenter\", () => {\n      const tooltip = dayElement.querySelector('.event-tooltip');\n      if (tooltip) {\n        tooltip.classList.add(\"tooltip-visible\");\n      }\n    });\n    \n    dayElement.addEventListener(\"mouseleave\", () => {\n      const tooltip = dayElement.querySelector('.event-tooltip');\n      if (tooltip) {\n        tooltip.classList.remove(\"tooltip-visible\");\n      }\n    });\n  }\n\n  /**\n   * Set up click handling for a day element\n   */\n  private setupDayClickHandler(dayElement: HTMLElement, day: number): void {\n    let lastTapTime = 0;\n    \n    dayElement.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      \n      const currentTime = new Date().getTime();\n      const tapLength = currentTime - lastTapTime;\n      \n      // Handle touch events differently\n      if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {\n        if (tapLength < 500 && tapLength > 0) {\n          // Double tap detected - show tooltip\n          const tooltip = dayElement.querySelector('.event-tooltip');\n          if (tooltip) {\n            const tooltips = this.shadowRoot?.querySelectorAll('.event-tooltip.tooltip-visible');\n            tooltips?.forEach(t => t.classList.remove(\"tooltip-visible\"));\n            tooltip.classList.add(\"tooltip-visible\");\n          }\n        } else {\n          // Single tap - handle range or single selection\n          this.handleRangeSelection(day);\n        }\n      } else {\n        // For non-mobile, handle range or single selection\n        this.handleRangeSelection(day);\n      }\n      \n      lastTapTime = currentTime;\n    });\n  }\n\n  /**\n   * Add holiday information to a day element\n   * Returns true if the day is a holiday\n   */\n  private addHolidayInfo(dayElement: HTMLElement, day: number): boolean {\n    let isHoliday = false;\n    \n    // Check if it's Friday (6th day in JavaScript's getDay, where 0 is Sunday)\n    const dayOfWeek = PersianDate.getDayOfWeek(this.jalaliYear, this.jalaliMonth, day);\n    if (dayOfWeek === 5) { // Friday\n      dayElement.classList.add(\"friday\");\n      isHoliday = true;\n    }\n    \n    // Check if it's a holiday from events.json based on holiday types\n    if (EventUtils.isHoliday(this.jalaliMonth, day, this.holidayTypes, this.includeAllTypes)) {\n      dayElement.classList.add(\"holiday\");\n      isHoliday = true;\n      \n      // Add tooltip with event titles\n      const events = EventUtils.getEvents(this.jalaliMonth, day, this.holidayTypes, this.includeAllTypes);\n      if (events.length > 0) {\n        const tooltip = this.createEventTooltip(events);\n        dayElement.appendChild(tooltip);\n      }\n    }\n    \n    return isHoliday;\n  }\n\n  /**\n   * Create tooltip element for events\n   */\n  private createEventTooltip(events: any[]): HTMLElement {\n    const tooltip = document.createElement(\"div\");\n    tooltip.classList.add(\"event-tooltip\");\n    \n    events.forEach(event => {\n      const eventItem = document.createElement(\"div\");\n      eventItem.classList.add(\"event-item\");\n      \n      // Add 'holiday' class for holiday events\n      if (event.holiday) {\n        eventItem.classList.add(\"holiday\");\n      }\n      \n      // Add type label with Persian text\n      const typeLabel = document.createElement(\"span\");\n      typeLabel.classList.add(\"event-type-label\");\n      typeLabel.textContent = this.holidayTypeLabels[event.type] || event.type;\n      eventItem.appendChild(typeLabel);\n      \n      // Add event title\n      const titleSpan = document.createElement(\"span\");\n      titleSpan.textContent = event.title;\n      eventItem.appendChild(titleSpan);\n      \n      tooltip.appendChild(eventItem);\n    });\n    \n    return tooltip;\n  }\n\n  /**\n   * Navigate to a specific date (today or tomorrow)\n   */\n  private navigateToDate(dateToUse: Date): void {\n    // Convert to Jalali date\n    const jalaliDate = PersianDate.gregorianToJalali(\n      dateToUse.getFullYear(),\n      dateToUse.getMonth() + 1,\n      dateToUse.getDate()\n    );\n    \n    const previousYear = this.jalaliYear;\n    \n    // Update current view to the specified date's month/year\n    this.jalaliYear = jalaliDate[0];\n    this.jalaliMonth = jalaliDate[1];\n    \n    // If the year has changed, refresh the events\n    if (previousYear !== this.jalaliYear) {\n      EventUtils.refreshEvents();\n    }\n    \n    // Render the calendar with the new month/year\n    this.renderCalendar();\n    \n    // Select the date\n    this.selectDate(jalaliDate[2]);\n  }\n\n  /**\n   * Navigate to today's date and select it\n   */\n  private goToToday(): void {\n    this.navigateToDate(new Date());\n  }\n\n  /**\n   * Navigate to tomorrow's date and select it\n   */\n  private goToTomorrow(): void {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    this.navigateToDate(tomorrow);\n  }\n\n  /**\n   * Select a specific date\n   */\n  selectDate(day: number) {\n    this.jalaliDay = day;\n    this.selectedDate = [this.jalaliYear, this.jalaliMonth, this.jalaliDay];\n    \n    // Format and display the date\n    this.formatAndSetValue();\n    \n    // Get all events for the selected date\n    const events = EventUtils.getEvents(this.jalaliMonth, day, this.holidayTypes, this.includeAllTypes);\n    \n    // Format the date according to the current format\n    const formattedDate = this.formatDate(this.selectedDate, this.format);\n    \n    // Dispatch change event\n    this.dispatchEvent(new CustomEvent(\"change\", {\n      detail: {\n        jalali: this.selectedDate,\n        gregorian: PersianDate.jalaliToGregorian(this.jalaliYear, this.jalaliMonth, this.jalaliDay),\n        isHoliday: EventUtils.isHoliday(this.jalaliMonth, day, this.holidayTypes, this.includeAllTypes),\n        events: events,\n        formattedDate: formattedDate\n      },\n      bubbles: true\n    }) as PersianDateChangeEvent);\n    \n    // Close any open dropdowns before hiding the calendar\n    this.closeAllDropdowns();\n    \n    this.toggleCalendar();\n    this.renderCalendar();\n  }\n\n  /**\n   * Format the selected date and set input value\n   */\n  private formatAndSetValue() {\n    if (this.isRangeMode) {\n      if (!this.rangeStart || !this.rangeEnd) {\n        this.input.value = '';\n        return;\n      }\n\n      const formatRange = (date: DateTuple) => {\n        const [year, month, day] = date;\n        return this.formatDate(date, this.format);\n      };\n\n      this.input.value = `${formatRange(this.rangeStart)} - ${formatRange(this.rangeEnd)}`;\n      return;\n    }\n\n    if (!this.selectedDate) {\n      this.input.value = '';\n      return;\n    }\n\n    this.input.value = this.formatDate(this.selectedDate, this.format);\n  }\n\n  /**\n   * Format a date tuple according to the specified format\n   */\n  private formatDate(date: DateTuple, format: string): string {\n    if (!date) return '';\n    \n    const [year, month, day] = date;\n    \n    // Handle special formats first\n    const specialFormat = this.handleSpecialFormat(format, year, month, day);\n    if (specialFormat !== null) {\n      return specialFormat;\n    }\n    \n    // Handle general format\n    return this.handleGeneralFormat(format, year, month, day);\n  }\n\n  /**\n   * Handle special predefined formats\n   */\n  private handleSpecialFormat(format: string, year: number, month: number, day: number): string | null {\n    type SpecialFormat = 'YYYY/MM/DD' | 'YYYY-MM-DD' | 'YYYY/MM/DDth';\n    const specialFormats: Record<SpecialFormat, () => string> = {\n      'YYYY/MM/DD': () => `${this.toPersianNum(year)}/${this.toPersianNum(month.toString().padStart(2, '0'))}/${this.toPersianNum(day.toString().padStart(2, '0'))}`,\n      'YYYY-MM-DD': () => `${this.toPersianNum(year)}-${this.toPersianNum(month.toString().padStart(2, '0'))}-${this.toPersianNum(day.toString().padStart(2, '0'))}`,\n      'YYYY/MM/DDth': () => `${this.toPersianNum(year)}/${this.toPersianNum(month.toString().padStart(2, '0'))}/${this.toPersianNum(day)}ام`\n    };\n\n    return (specialFormats[format as SpecialFormat]?.() || null);\n  }\n\n  /**\n   * Handle general format with tokens\n   */\n  private handleGeneralFormat(format: string, year: number, month: number, day: number): string {\n    // Split format into components while preserving spaces\n    const components = format.split(/(\\s+)/);\n    const parts: string[] = [];\n    \n    for (let i = 0; i < components.length; i++) {\n      const component = components[i];\n      \n      if (!component.trim()) {\n        parts.push(component);\n        continue;\n      }\n      \n      let processedComponent = this.replaceFormatTokens(component, year, month, day);\n      parts.push(processedComponent);\n      \n      if (i < components.length - 1 && components[i + 1].trim()) {\n        parts.push(' ');\n      }\n    }\n    \n    return parts.join('');\n  }\n\n  /**\n   * Replace format tokens in a component\n   */\n  private replaceFormatTokens(component: string, year: number, month: number, day: number): string {\n    let processed = component;\n    \n    // Replace format tokens in the correct order\n    if (processed.includes('MMMM')) {\n      processed = processed.replace('MMMM', this.persianMonths[month - 1]);\n    } else if (processed.includes('MMM')) {\n      processed = processed.replace('MMM', this.persianMonths[month - 1].substring(0, 3));\n    }\n    \n    processed = processed.replace('YYYY', this.toPersianNum(year));\n    processed = processed.replace('MM', this.toPersianNum(month.toString().padStart(2, '0')));\n    processed = processed.replace('DD', this.toPersianNum(day.toString().padStart(2, '0')));\n    processed = processed.replace('dddd', this.getWeekdayName(year, month, day));\n    \n    // Handle ordinal suffix\n    if (processed.includes('th')) {\n      processed = processed.replace('th', 'ام');\n    }\n    \n    return processed;\n  }\n\n  private isValidFormat(format: string): boolean {\n    // Check if format contains at least one of the required patterns\n    const hasYear = format.includes('YYYY');\n    const hasMonth = format.includes('MM');\n    const hasDay = format.includes('DD');\n\n    // Check for invalid patterns\n    const invalidPatterns = /[^YMD\\/\\-\\. dth]/g;\n    const hasInvalidPatterns = invalidPatterns.test(format);\n\n    // Allow special formats\n    if (format === 'YYYY/MM' || format === 'DD/MM' || format === 'DD.MM.YYYY' || format === 'YYYY/MM/DDth') {\n      return true;\n    }\n\n    // For other formats, require at least two components\n    const componentCount = [hasYear, hasMonth, hasDay].filter(Boolean).length;\n    return componentCount >= 2 && !hasInvalidPatterns;\n  }\n\n  private getWeekdayName(year: number, month: number, day: number): string {\n    const weekdays = ['شنبه', 'یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنج‌شنبه', 'جمعه'];\n    const date = new Date(year, month - 1, day);\n    const weekday = date.getDay();\n    return weekdays[weekday];\n  }\n\n  /**\n   * Handle month change from dropdown\n   */\n  private handleMonthChange(month: number, monthName: string): void {\n    if (this.jalaliMonth === month) return;\n    \n    this.jalaliMonth = month;\n    this.renderCalendar();\n  }\n\n  /**\n   * Handle year change from dropdown\n   */\n  private handleYearChange(year: number): void {\n    if (this.jalaliYear === year) return;\n    \n    const previousYear = this.jalaliYear;\n    this.jalaliYear = year;\n    \n    // If the year has changed, refresh the events\n    if (previousYear !== year) {\n      EventUtils.refreshEvents();\n    }\n    \n    this.renderCalendar();\n  }\n\n  /**\n   * Sets the date value programmatically\n   */\n  public setValue(year: number, month: number, day: number): void {\n    this.selectedDate = [year, month, day];\n    this.jalaliYear = year;\n    this.jalaliMonth = month;\n    this.jalaliDay = day;\n    this.formatAndSetValue();\n    this.renderCalendar();\n  }\n\n  /**\n   * Gets the currently selected date as a tuple [year, month, day]\n   */\n  public getValue(): DateTuple | null {\n    return this.selectedDate ? [...this.selectedDate] : null;\n  }\n\n  /**\n   * Checks if the currently selected date is a holiday\n   */\n  public isSelectedDateHoliday(): boolean {\n    if (!this.selectedDate) return false;\n    return EventUtils.isHoliday(\n      this.selectedDate[1],\n      this.selectedDate[2],\n      this.holidayTypes,\n      this.includeAllTypes\n    );\n  }\n\n  /**\n   * Gets events for the currently selected date\n   */\n  public getSelectedDateEvents(): any[] {\n    if (!this.selectedDate) return [];\n    return [...EventUtils.getEvents(\n      this.selectedDate[1],\n      this.selectedDate[2],\n      this.holidayTypes,\n      this.includeAllTypes\n    )];\n  }\n\n  /**\n   * Clears the selected date\n   */\n  public clear(): void {\n    if (this.isRangeMode) {\n      this.rangeStart = null;\n      this.rangeEnd = null;\n    } else {\n      this.selectedDate = null;\n    }\n    this.input.value = '';\n    this.renderCalendar();\n  }\n\n  /**\n   * Initialize touch gesture support for the calendar\n   */\n  private initTouchGestures(): void {\n    if (!this.calendar || !this.shadowRoot) return;\n    \n    let startX: number = 0;\n    let startY: number = 0;\n    let isDragging: boolean = false;\n    const threshold = 20;\n    let touchStartTime: number = 0;\n    let isSwiping = false;\n    \n    // Helper for touch event handler setup - fixed type issues\n    const setupTouchHandler = <K extends keyof HTMLElementEventMap>(\n      element: HTMLElement | null, \n      eventType: K, \n      handler: (e: HTMLElementEventMap[K]) => void, \n      options?: AddEventListenerOptions\n    ): void => {\n      if (element) {\n        element.addEventListener(eventType, handler as EventListener, options);\n      }\n    };\n    \n    // Handle touch start\n    const handleTouchStart = (e: TouchEvent): void => {\n      if (!this.calendar?.classList.contains(\"visible\")) return;\n      \n      startX = e.touches[0].clientX;\n      startY = e.touches[0].clientY;\n      isDragging = false;\n      isSwiping = false;\n      touchStartTime = Date.now();\n      e.stopPropagation();\n    };\n    \n    // Handle touch move\n    const handleTouchMove = (e: TouchEvent): void => {\n      if (!this.calendar?.classList.contains(\"visible\")) return;\n      \n      const currentX = e.touches[0].clientX;\n      const currentY = e.touches[0].clientY;\n      const diffX = currentX - startX;\n      const diffY = currentY - startY;\n      \n      // If already swiping, prevent default\n      if (isSwiping) {\n        e.preventDefault();\n        return;\n      }\n      \n      // Detect horizontal swipe\n      if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > threshold) {\n        e.preventDefault();\n        isDragging = true;\n        isSwiping = true;\n      }\n    };\n    \n    // Handle touch end\n    const handleTouchEnd = (e: TouchEvent): void => {\n      if (!this.calendar?.classList.contains(\"visible\")) return;\n      \n      const wasSwiping = isSwiping;\n      isSwiping = false;\n      \n      const touchEndTime = Date.now();\n      const touchDuration = touchEndTime - touchStartTime;\n      \n      // Process if touch was quick or we detected dragging\n      if ((touchDuration < 300 || isDragging) && !this.isTransitioning) {\n        const endX = e.changedTouches[0].clientX;\n        const endY = e.changedTouches[0].clientY;\n        \n        const diffX = endX - startX;\n        const diffY = endY - startY;\n        \n        // Consider only significant horizontal movements\n        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > threshold) {\n          // Determine direction based on RTL mode\n          const isRTL = getComputedStyle(this).getPropertyValue('--jdp-direction').trim() === 'rtl';\n          \n          if ((isRTL && diffX < 0) || (!isRTL && diffX > 0)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.changeMonth(1); // Next month\n          } else if ((isRTL && diffX > 0) || (!isRTL && diffX < 0)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.changeMonth(-1); // Previous month\n          }\n        }\n      }\n      \n      // Prevent click events if we were swiping\n      if (wasSwiping) {\n        e.preventDefault();\n      }\n    };\n    \n    // Handle touch cancel\n    const handleTouchCancel = (): void => {\n      isSwiping = false;\n      isDragging = false;\n    };\n    \n    // Set up calendar touch events\n    // Use explicit 'touchstart' type instead of string\n    this.calendar.addEventListener('touchstart', handleTouchStart as EventListener, { passive: true });\n    this.calendar.addEventListener('touchmove', handleTouchMove as EventListener, { passive: false });\n    this.calendar.addEventListener('touchend', handleTouchEnd as EventListener, { passive: false });\n    this.calendar.addEventListener('touchcancel', handleTouchCancel as EventListener);\n    \n    // Set up navigation button touch handlers\n    const prevMonthBtn = this.shadowRoot.getElementById(\"prev-month\");\n    const nextMonthBtn = this.shadowRoot.getElementById(\"next-month\");\n    \n    if (prevMonthBtn) {\n      prevMonthBtn.addEventListener('touchstart', (e: Event) => e.stopPropagation(), { passive: true });\n    }\n    \n    if (nextMonthBtn) {\n      nextMonthBtn.addEventListener('touchstart', (e: Event) => e.stopPropagation(), { passive: true });\n    }\n  }\n\n  /**\n   * Helper method to close all dropdowns\n   */\n  private closeAllDropdowns(): void {\n    if (!this.shadowRoot) return;\n    \n    const dropdowns = this.shadowRoot.querySelectorAll(\".select-content\");\n    dropdowns.forEach(dropdown => {\n      dropdown.classList.remove(\"open\");\n    });\n  }\n\n  /**\n   * Helper method to toggle dropdown visibility\n   */\n  private toggleDropdown(dropdown: HTMLElement | null): void {\n    if (!dropdown) return;\n    \n    // Check if this dropdown is already open\n    const isCurrentlyOpen = dropdown.classList.contains(\"open\");\n    \n    // Close all dropdowns\n    this.closeAllDropdowns();\n    \n    // If the dropdown wasn't open, open it now\n    // This creates a toggle effect\n    if (!isCurrentlyOpen) {\n      // Open the dropdown\n      dropdown.classList.add(\"open\");\n      \n      // Find the selected item in this dropdown and scroll to it\n      // Use requestAnimationFrame for better timing with rendering\n      requestAnimationFrame(() => {\n        const selectedItem = dropdown.querySelector(\".select-item.selected\") as HTMLElement;\n        if (selectedItem) {\n          // Calculate the optimal scroll position - center the selected item\n          const scrollTop = selectedItem.offsetTop - \n            (dropdown.clientHeight / 2) + (selectedItem.clientHeight / 2);\n          \n          // Apply the scroll position\n          dropdown.scrollTop = Math.max(0, scrollTop);\n        }\n      });\n    }\n  }\n\n  /**\n   * Programmatically open the calendar\n   * Will close any other open calendar instances\n   */\n  public open(): void {\n    if (!this.calendar.classList.contains(\"visible\")) {\n      this.toggleCalendar();\n    }\n  }\n\n  /**\n   * Programmatically close the calendar\n   */\n  public close(): void {\n    if (this.calendar.classList.contains(\"visible\")) {\n      this.toggleCalendar();\n    }\n  }\n\n  /**\n   * Set minimum date\n   */\n  public setMinDate(year: number, month: number, day: number): void {\n    this.minDate = [year, month, day];\n    if (this.calendar) {\n      this.renderCalendar();\n    }\n  }\n\n  /**\n   * Set maximum date\n   */\n  public setMaxDate(year: number, month: number, day: number): void {\n    this.maxDate = [year, month, day];\n    if (this.calendar) {\n      this.renderCalendar();\n    }\n  }\n\n  /**\n   * Check if a date is within the allowed range\n   */\n  private isDateInRange(year: number, month: number, day: number): boolean {\n    if (!this.minDate && !this.maxDate) return true;\n    \n    const date = [year, month, day];\n    \n    if (this.minDate && date < this.minDate) return false;\n    if (this.maxDate && date > this.maxDate) return false;\n    \n    return true;\n  }\n\n  /**\n   * Check if a date is disabled\n   */\n  private isDateDisabled(year: number, month: number, day: number): boolean {\n    if (!this.disabledDatesFn) return false;\n    return this.disabledDatesFn(year, month, day);\n  }\n\n  private handleRangeSelection(day: number): void {\n    if (!this.isRangeMode) {\n      this.selectDate(day);\n      return;\n    }\n\n    const currentDate: DateTuple = [this.jalaliYear, this.jalaliMonth, day];\n\n    if (!this.isSelectingRange) {\n      // Start new range\n      this.rangeStart = currentDate;\n      this.rangeEnd = null;\n      this.isSelectingRange = true;\n    } else {\n      // Complete range\n      this.rangeEnd = currentDate;\n      this.isSelectingRange = false;\n\n      // Ensure range is in correct order (start before end)\n      if (this.rangeStart && this.rangeEnd) {\n        const comparison = this.compareDates(this.rangeStart, this.rangeEnd);\n        if (comparison > 0) {\n          // Swap start and end if they're in wrong order\n          [this.rangeStart, this.rangeEnd] = [this.rangeEnd, this.rangeStart];\n        }\n      }\n\n      // Format and display the range\n      this.formatAndSetValue();\n      \n      // Dispatch change event with range data\n      this.dispatchEvent(new CustomEvent(\"change\", {\n        detail: {\n          range: {\n            start: this.rangeStart,\n            end: this.rangeEnd\n          },\n          isRange: true\n        },\n        bubbles: true\n      }));\n      \n      // Close calendar\n      this.closeAllDropdowns();\n      this.toggleCalendar();\n    }\n\n    // Force a re-render of the calendar to update the range highlighting\n    this.renderCalendar();\n  }\n\n  // Add new methods for range selection\n  public setRange(start: DateTuple, end: DateTuple): void {\n    if (!this.isRangeMode) return;\n    \n    // Ensure range is in correct order\n    if (start > end) {\n      [start, end] = [end, start];\n    }\n    \n    this.rangeStart = [...start];\n    this.rangeEnd = [...end];\n    this.formatAndSetValue();\n    this.renderCalendar();\n  }\n\n  public getRange(): { start: DateTuple | null; end: DateTuple | null } {\n    return {\n      start: this.rangeStart ? [...this.rangeStart] : null,\n      end: this.rangeEnd ? [...this.rangeEnd] : null\n    };\n  }\n}\n\n// Register the custom element with the browser\n// Note: This is intentionally commented out because registration is handled in index.ts\n// Uncomment if you need standalone registration without index.ts\n// if (typeof window !== 'undefined' && !customElements.get('persian-datepicker-element')) {\n//   customElements.define('persian-datepicker-element', PersianDatePickerElement);\n// }\n\n// Export the class for direct usage\n","// Import the custom element class\r\nimport { PersianDatePickerElement } from './persian-datepicker-element';\r\n// Import the utility class\r\nimport { PersianDate } from './persian-date';\r\n// Import types from types directory\r\nimport type { \r\n  PersianDatePickerElementOptions, \r\n  PersianDateChangeEvent,\r\n  DateTuple,\r\n  PersianEvent\r\n} from './types';\r\n\r\n// Declare global window interface extension for TypeScript\r\ndeclare global {\r\n  interface Window {\r\n    PersianDatePickerElement?: typeof PersianDatePickerElement;\r\n  }\r\n}\r\n\r\n// Try to register the custom element with the browser\r\n// First check if we're in a browser environment and if customElements API exists\r\nconst isBrowser = typeof window !== 'undefined';\r\nconst hasCustomElements = isBrowser && typeof customElements !== 'undefined';\r\n\r\nif (hasCustomElements) {\r\n  // Only register if it's not already registered\r\n  if (!customElements.get('persian-datepicker-element')) {\r\n    try {\r\n      customElements.define('persian-datepicker-element', PersianDatePickerElement);\r\n      console.info('persian-datepicker-element registered successfully');\r\n    } catch (error) {\r\n      console.error('Error registering persian-datepicker-element:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Export the classes and types\r\nexport { PersianDatePickerElement, PersianDate };\r\nexport type { \r\n  PersianDatePickerElementOptions, \r\n  PersianDateChangeEvent,\r\n  DateTuple,\r\n  PersianEvent\r\n};\r\n\r\n// Default export for convenient usage\r\nexport default PersianDatePickerElement; "],"names":["PersianDate","j_y","j_m","j_d","parseInt","jy","jm","jd","j_day_no","Math","i","g_day_no","gy","leap","g_y","g_m","g_d","gm","gd","year","breaks","month","monthNames","jYear","jMonth","jDay","gdate","date","Date","day","hijriToJalali","hy","hm","hd","hijriToGregorian","Error","julianDaysToGregorian","julianDays","z","a","c","b","d","e","f","epochDays","gregorianToJalali","g_days_in_month","j_days_in_month","isLeapYear","jdn","dayOfYearJalali","fallbackEvents","mappedEvents","persianCalendarData","isLoading","lastFetchYear","fetchPromise","loadEventsData","today","currentYear","jalaliToday","response","fetch","mapPersianCalendarEvents","allEvents","Array","event","hijriEvents","jalaliDate","error","console","EventUtils","eventTypes","includeAllTypes","events","type","holidaysOnly","types","Set","styles","DEFAULT_HOLIDAY_TYPES","PersianDatePickerElement","HTMLElement","num","persianDigits","x","options","path","shadow","document","elements","element","clone","name","oldValue","newValue","rtl","JSON","disabledFn","window","attrName","button","className","placeholder","dayNames","dayNameEl","monthSelectTrigger","yearSelectTrigger","monthSelectValue","yearSelectValue","monthSelectContent","yearSelectContent","index","monthValue","monthItem","currentJalaliYear","startYear","endYear","yearItem","target","prevMonthBtn","nextMonthBtn","todayBtn","tomorrowBtn","addClickHandler","handler","t","Boolean","todayButtonText","todayButtonClass","tomorrowButtonText","tomorrowButtonClass","showMonthSelector","showYearSelector","showPrevButton","showNextButton","showTodayButton","showTomorrowButton","chevronSVG","inputRect","windowHeight","originalVisibility","originalDisplay","calendarHeight","spaceBelow","spaceAbove","direction","daysContainer","slideClass","Number","requestAnimationFrame","setTimeout","monthItems","item","yearItems","firstDayOfMonth","daysInMonth","adjustedFirstDay","emptyDay","dayElement","isInRange","isDisabled","currentDate","date1","date2","tooltip","lastTapTime","currentTime","tapLength","navigator","tooltips","isHoliday","eventItem","typeLabel","titleSpan","dateToUse","previousYear","tomorrow","formattedDate","CustomEvent","formatRange","format","specialFormat","specialFormats","components","parts","component","processedComponent","processed","hasYear","hasMonth","hasDay","hasInvalidPatterns","invalidPatterns","componentCount","weekdays","monthName","startX","startY","isDragging","touchStartTime","isSwiping","currentX","currentY","diffX","diffY","wasSwiping","touchDuration","endX","endY","isRTL","getComputedStyle","dropdowns","dropdown","isCurrentlyOpen","selectedItem","scrollTop","comparison","start","end","hasCustomElements","customElements"],"mappings":"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"}